Patch: intraacl-rights
Type: feature
MediaWiki: REL1_18 1.18.6 7e508a3b9bfc532a0b4a1bd780c61f69ff4ccbda

Patch needed for IntraACL extension. Enables read access checks
in various parts of MediaWiki.

2013-03-25 - Do not cloak page and category links in article content
2013-03-29 - Still register dependencies for unreadable images and templates
2013-07-31 - Check permissions for email notifications
2013-08-27 - Check permissions in API
2013-09-25 - Support parser cache key personalisation
2013-12-06 - Use hook for parser cache key personalisation, disable title patch in LinkBatch
2013-12-09 - Disable parser patch during wfIsBadImage check
2013-12-12 - Check permissions in findBySha1() of file repo - fixes duplicate upload errors
2014-01-10 - DBMS-side filtering of page lists based on read permissions
2014-01-13 - Re-enable normal MediaWiki permission checks
2014-06-18 - Add hook to allow checking for non-readable uploads

diff --git a/includes/CategoryPage.php b/includes/CategoryPage.php
index 6a0f613..53821d8 100644
--- a/includes/CategoryPage.php
+++ b/includes/CategoryPage.php
@@ -236,6 +236,11 @@ class CategoryViewer {
 	 * @deprecated since 1.17 kept for compatibility, please use addSubcategoryObject instead
 	 */
 	function addSubcategory( Title $title, $sortkey, $pageLength ) {
+// <IntraACL>
+		if ( !$title->userCanReadEx() ) {
+			return;
+		}
+// </IntraACL>
 		$this->addSubcategoryObject( Category::newFromTitle( $title ), $sortkey, $pageLength );
 	}
 
@@ -293,6 +298,12 @@ class CategoryViewer {
 	 * Add a miscellaneous page
 	 */
 	function addPage( $title, $sortkey, $pageLength, $isRedirect = false ) {
+/*op-patch|TS|2009-06-19|HaloACL|SafeTitle|start*/
+		if (!$title->userCanReadEx()) {
+			return;
+		}
+/*op-patch|TS|2009-06-19|end*/  
+		
 		global $wgContLang;
 
 		$link = Linker::link( $title );
diff --git a/includes/ChangesFeed.php b/includes/ChangesFeed.php
index c4c4a8a..ba9e433 100644
--- a/includes/ChangesFeed.php
+++ b/includes/ChangesFeed.php
@@ -49,15 +49,16 @@ class ChangesFeed {
 	 * @return null or true
 	 */
 	public function execute( $feed, $rows, $lastmod, $opts ) {
-		global $wgLang, $wgRenderHashAppend;
+		global $wgLang, $wgRenderHashAppend, $wgUser;
 
 		if ( !FeedUtils::checkFeedOutput( $this->format ) ) {
 			return;
 		}
 
+		$userid = $wgUser->getId();
 		$optionsHash = md5( serialize( $opts->getAllValues() ) ) . $wgRenderHashAppend;
-		$timekey = wfMemcKey( $this->type, $this->format, $wgLang->getCode(), $optionsHash, 'timestamp' );
-		$key = wfMemcKey( $this->type, $this->format, $wgLang->getCode(), $optionsHash );
+		$timekey = wfMemcKey( $this->type, $this->format, $userid, $wgLang->getCode(), $optionsHash, 'timestamp' );
+		$key = wfMemcKey( $this->type, $this->format, $userid, $wgLang->getCode(), $optionsHash );
 
 		FeedUtils::checkPurge( $timekey, $key );
 
@@ -162,6 +163,11 @@ class ChangesFeed {
 
 		foreach( $sorted as $obj ) {
 			$title = Title::makeTitle( $obj->rc_namespace, $obj->rc_title );
+// <IntraACL>
+			if( !$title || method_exists( $title, 'userCanReadEx' ) && !$title->userCanReadEx() ) {
+				continue;
+			}
+// </IntraACL>
 			$talkpage = MWNamespace::canTalk( $obj->rc_namespace ) ? $title->getTalkPage()->getFullUrl() : '';
 			// Skip items with deleted content (avoids partially complete/inconsistent output)
 			if( $obj->rc_deleted ) continue;
diff --git a/includes/FeedUtils.php b/includes/FeedUtils.php
index 4502c3a..c29f200 100644
--- a/includes/FeedUtils.php
+++ b/includes/FeedUtils.php
@@ -97,11 +97,8 @@ class FeedUtils {
 					$actiontext,
 					$skin->formatComment( $comment ) ) ) ) . "</p>\n";
 
-		//NOTE: Check permissions for anonymous users, not current user.
-		//      No "privileged" version should end up in the cache.
-		//      Most feed readers will not log in anway.
-		$anon = new User();
-		$accErrors = $title->getUserPermissionsErrors( 'read', $anon, true );
+		// NOTE: Check permissions for current user. -- HaloACL
+		$accErrors = $title->getUserPermissionsErrors( 'read', $wgUser, true );
 
 		if( $title->getNamespace() >= 0 && !$accErrors && $newid ) {
 			if( $oldid ) {
diff --git a/includes/ImageFunctions.php b/includes/ImageFunctions.php
index d048a9d..0baec8d 100644
--- a/includes/ImageFunctions.php
+++ b/includes/ImageFunctions.php
@@ -23,7 +23,17 @@ function wfIsBadImage( $name, $contextTitle = false ) {
 	wfProfileIn( __METHOD__ );
 
 	# Handle redirects
+// <IntraACL>
+	if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+		$hacl = haclfDisableTitlePatch();
+	}
+// </IntraACL>
 	$redirectTitle = RepoGroup::singleton()->checkRedirect( Title::makeTitle( NS_FILE, $name ) );
+// <IntraACL>
+	if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+		haclfRestoreTitlePatch( $hacl );
+	}
+// </IntraACL>
 	if( $redirectTitle ) {
 		$name = $redirectTitle->getDbKey();
 	}
diff --git a/includes/Linker.php b/includes/Linker.php
index c85121f..f821738 100644
--- a/includes/Linker.php
+++ b/includes/Linker.php
@@ -1640,6 +1640,10 @@ class Linker {
 						array(),
 						array( 'action' => 'edit' )
 					);
+				// <IntraACL>
+				} elseif ( !$titleObj->userCanRead() ) {
+					continue;
+				// </IntraACL>
 				} else {
 					$editLink = self::link(
 						$titleObj,
diff --git a/includes/LogEventsList.php b/includes/LogEventsList.php
index 744a60c..9625083 100644
--- a/includes/LogEventsList.php
+++ b/includes/LogEventsList.php
@@ -316,6 +316,11 @@ class LogEventsList {
 	public function logLine( $row ) {
 		$classes = array( 'mw-logline-' . $row->log_type );
 		$title = Title::makeTitle( $row->log_namespace, $row->log_title );
+// <IntraACL>
+		if ( !$title->userCanReadEx() ) {
+			return '';
+		}
+// </IntraACL>
 		// Log time
 		$time = $this->logTimestamp( $row );
 		// User links
diff --git a/includes/OutputPage.php b/includes/OutputPage.php
index 68c771b..a1238e5 100644
--- a/includes/OutputPage.php
+++ b/includes/OutputPage.php
@@ -1068,6 +1068,12 @@ class OutputPage extends ContextSource {
 
 		# Add the remaining categories to the skin
 		if ( wfRunHooks( 'OutputPageMakeCategoryLinks', array( &$this, $categories, &$this->mCategoryLinks ) ) ) {
+			// <IntraACL>
+			// Do not cloak category links during display
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			foreach ( $categories as $category => $type ) {
 				$origcategory = $category;
 				$title = Title::makeTitleSafe( NS_CATEGORY, $category );
@@ -1081,6 +1087,11 @@ class OutputPage extends ContextSource {
 				$this->mCategories[] = $title->getText();
 				$this->mCategoryLinks[$type][] = Linker::link( $title, $text );
 			}
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 		}
 	}
 
@@ -1978,7 +1989,14 @@ class OutputPage extends ContextSource {
 		$this->setRobotPolicy( 'noindex,nofollow' );
 		$this->setArticleRelated( false );
 
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			// IntraACL -- do not produce "&returnto=Access_Denied" links
+			$hacl = haclfDisableTitlePatch();
+		}
 		$returnto = Title::newFromURL( $wgRequest->getVal( 'title', '' ) );
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $hacl );
+		}
 		$returntoquery = array();
 		if( $returnto ) {
 			$returntoquery = array( 'returnto' => $returnto->getPrefixedText() );
@@ -2214,7 +2232,9 @@ $templates
 		} else {
 			$titleObj = Title::newFromText( $returnto );
 		}
-		if ( !is_object( $titleObj ) ) {
+/*patch|2011-04-05|IntraACL|start*/
+		if ( !$titleObj instanceof Title || method_exists( $titleObj, 'userCanReadEx' ) && !$titleObj->userCanReadEx() ) {
+/*patch|2011-04-05|IntraACL|end*/
 			$titleObj = Title::newMainPage();
 		}
 
diff --git a/includes/QueryPage.php b/includes/QueryPage.php
index b3bb974..70e11d2 100644
--- a/includes/QueryPage.php
+++ b/includes/QueryPage.php
@@ -560,6 +560,12 @@ abstract class QueryPage extends SpecialPage {
 			# $res might contain the whole 1,000 rows, so we read up to
 			# $num [should update this to use a Pager]
 			for ( $i = 0; $i < $num && $row = $dbr->fetchObject( $res ); $i++ ) {
+// <IntraACL>
+				$title = Title::makeTitleSafe( $row->namespace, $row->title );
+				if ( !$title || !$title->userCanReadEx() ) {
+					continue;
+				}
+// </IntraACL>
 				$line = $this->formatResult( $skin, $row );
 				if ( $line ) {
 					$attr = ( isset( $row->usepatrol ) && $row->usepatrol && $row->patrolled == 0 )
diff --git a/includes/Title.php b/includes/Title.php
index 0260749..b52fb69 100644
--- a/includes/Title.php
+++ b/includes/Title.php
@@ -103,7 +103,9 @@ class Title {
 		$t = new Title();
 		$t->mDbkeyform = $key;
 		if ( $t->secureAndSplit() ) {
-			return $t;
+// <IntraACL>
+			return $t->checkAccessControl();
+// </IntraACL>
 		} else {
 			return null;
 		}
@@ -156,7 +158,10 @@ class Title {
 				$cachedcount++;
 				Title::$titleCache[$text] =& $t;
 			}
-			return $t;
+/*op-patch|TS|2009-06-19|HaloACL|SafeTitle|start*/
+			return $t->checkAccessControl();
+/*op-patch|TS|2009-06-19|end*/  
+// Preplaced by patch			return $t;
 		} else {
 			$ret = null;
 			return $ret;
@@ -191,7 +196,9 @@ class Title {
 
 		$t->mDbkeyform = str_replace( ' ', '_', $url );
 		if ( $t->secureAndSplit() ) {
-			return $t;
+// <IntraACL>
+			return $t->checkAccessControl();
+// </IntraACL>
 		} else {
 			return null;
 		}
@@ -303,7 +310,11 @@ class Title {
 		$t->mArticleID = ( $ns >= 0 ) ? -1 : 0;
 		$t->mUrlform = wfUrlencode( $t->mDbkeyform );
 		$t->mTextform = str_replace( '_', ' ', $title );
+/*op-patch|TS|2009-06-19|HaloACL|SafeTitle|start*/
+		$t = $t->checkAccessControl();
 		return $t;
+/*op-patch|TS|2009-06-19|end*/  
+// Preplaced by patch		return $t;
 	}
 
 	/**
@@ -321,7 +332,9 @@ class Title {
 		$t = new Title();
 		$t->mDbkeyform = Title::makeName( $ns, $title, $fragment, $interwiki );
 		if ( $t->secureAndSplit() ) {
-			return $t;
+// <IntraACL>
+			return $t->checkAccessControl();
+// </IntraACL>
 		} else {
 			return null;
 		}
@@ -1838,7 +1851,9 @@ class Title {
 
 		$result = null;
 		wfRunHooks( 'userCan', array( &$this, &$wgUser, 'read', &$result ) );
-		if ( $result !== null ) {
+		// <IntraACL>
+		if ( $result !== NULL && !$result ) {
+		// </IntraACL>
 			return $result;
 		}
 
@@ -1890,7 +1905,18 @@ class Title {
 					return false;
 				}
 
+				// <IntraACL>
+				// Disable title patch here to avoid infinite recursion
+				if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+					$hacl = haclfDisableTitlePatch();
+				}
+				// </IntraACL>
 				$pure = SpecialPage::getTitleFor( $name )->getPrefixedText();
+				// <IntraACL>
+				if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+					haclfRestoreTitlePatch( $hacl );
+				}
+				// </IntraACL>
 				if ( in_array( $pure, $wgWhitelistRead, true ) ) {
 					return true;
 				}
@@ -4261,6 +4287,7 @@ class Title {
 
 		return $types;
 	}
+
 	/**
 	 * Get a filtered list of all restriction types supported by this wiki.
 	 * @param bool $exists True to get all restriction types that apply to
@@ -4341,4 +4368,104 @@ class Title {
 		wfRunHooks( 'PageContentLanguage', array( $this, &$pageLang, $wgLang ) );
 		return wfGetLangObj( $pageLang );
 	}
+
+// <IntraACL>
+	
+	/**
+	 * This function is called from the patches for HaloACL for secure listings
+	 * (e.g. Special:AllPages). It checks, whether the current user is allowed
+	 * to read the article for this title object. For normal pages this is
+	 * evaluate in the method <userCanRead>.
+	 * However, the special pages that generate listings, often create title
+	 * objects before the can check their accessibility. The fallback mechanism
+	 * of HaloACL creates the title "Permission denied" for the article that
+	 * must not be accessed. The listings would then show a link to "Permission
+	 * denied". So this function returns "false" for the title "Permission denied"
+	 * as well.
+	 *
+	 * @return
+	 * 		true, if this title can be read
+	 * 		false, if the title is protected or "Permission denied".
+	 */
+	public function userCanReadEx( $otherUser = NULL ) {
+		if ( !defined( 'HACL_HALOACL_VERSION' ) ) {
+			// IntraACL is disabled
+			return true;
+		}
+		global $haclgContLang;
+		if ( $this->mTextform === $haclgContLang->getPermissionDeniedPage() ) {
+			// Special handling of "Permission denied" page
+			return false;
+		}
+		if ( $otherUser ) {
+			$canRead = false;
+			$status = HACLEvaluator::userCan( $this, $otherUser, 'read', $canRead );
+			return $canRead;
+		}
+		return $this->userCanRead();
+	}
+
+	/**
+	 * This function checks, if this title is accessible for the action of the
+	 * current request. If the action is unknown it is assumed to be "read".
+	 * If the title is not accessible, the new title "Permission denied" is
+	 * returned. This is a fallback to protect titles if all other security
+	 * patches fail.
+	 *
+	 * While a page is rendered, the same title is often checked several times.
+	 * To speed things up, the results of an accessibility check are internally
+	 * cached.
+	 *
+	 * This function can be disabled in HACL_Initialize.php or LocalSettings.php
+	 * by setting the variable $haclgEnableTitleCheck = false.
+	 *
+	 * @return
+	 * 		$this, if access is granted on this title or
+	 * 		the title for "Permission denied" if not.
+	 */
+	private function checkAccessControl() {
+		if ( !defined( 'HACL_HALOACL_VERSION' ) ) {
+			// IntraACL is disabled or not fully initialized
+			return $this;
+		}
+		global $haclgEnableTitleCheck;
+		if ( isset( $haclgEnableTitleCheck ) && $haclgEnableTitleCheck === false ) {
+			return $this;
+		}
+		static $permissionCache = array();
+		
+		$action = 'read';
+		$index = $this->getFullText().'-'.$action;
+		$allowed = @$permissionCache[$index];
+		if ( !isset( $allowed ) ) {
+			switch ( $action ) {
+				case 'create':
+				case 'move':
+				case 'delete':
+					$allowed = $this->userCan($action);
+					break;
+				case 'edit':
+					// If the article does not exist and edit right was requested,
+					// check for create right.
+					$allowed = $this->userCan($this->exists() ? 'edit' : 'create');
+					break;
+				default:
+					// If the user has no read access to a non-existing page,
+					// but has the right to create it - allow him to "read" it
+					$allowed = $this->userCanRead() || !$this->exists() && $this->userCan('create');
+			}
+			$permissionCache[$index] = $allowed;
+		}
+		if ( $allowed === false ) {
+			global $haclgContLang;
+			$etc = $haclgEnableTitleCheck;
+			$haclgEnableTitleCheck = false;
+			$t = Title::newFromURL($haclgContLang->getPermissionDeniedPage());
+			$haclgEnableTitleCheck = $etc;
+			return $t;
+		}
+		return $this;
+	}
+// </IntraACL>
+
 }
diff --git a/includes/User.php b/includes/User.php
index b256d84..563c3fc 100644
--- a/includes/User.php
+++ b/includes/User.php
@@ -256,7 +256,13 @@ class User {
 				$this->loadDefaults();
 				break;
 			case 'name':
+				if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+					$hacl = haclfDisableTitlePatch();
+				}
 				$this->mId = self::idFromName( $this->mName );
+				if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+					haclfRestoreTitlePatch( $hacl );
+				}
 				if ( !$this->mId ) {
 					# Nonexistent user placeholder object
 					$this->loadDefaults( $this->mName );
@@ -540,6 +546,12 @@ class User {
 	public static function isValidUserName( $name ) {
 		global $wgContLang, $wgMaxNameChars;
 
+		# Disable HaloACL title check as the main and/or
+		# user namespaces may be protected
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$hacl = haclfDisableTitlePatch();
+		}
+
 		if ( $name == ''
 		|| User::isIP( $name )
 		|| strpos( $name, '/' ) !== false
@@ -547,6 +559,9 @@ class User {
 		|| $name != $wgContLang->ucfirst( $name ) ) {
 			wfDebugLog( 'username', __METHOD__ .
 				": '$name' invalid due to empty, IP, slash, length, or lowercase" );
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			return false;
 		}
 
@@ -558,6 +573,9 @@ class User {
 			|| strcmp( $name, $parsed->getPrefixedText() ) ) {
 			wfDebugLog( 'username', __METHOD__ .
 				": '$name' invalid due to ambiguous prefixes" );
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			return false;
 		}
 
@@ -574,9 +592,15 @@ class User {
 		if( preg_match( $unicodeBlacklist, $name ) ) {
 			wfDebugLog( 'username', __METHOD__ .
 				": '$name' invalid due to blacklisted characters" );
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			return false;
 		}
 
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $hacl );
+		}
 		return true;
 	}
 
@@ -747,6 +771,14 @@ class User {
 	 * @return bool|string
 	 */
 	public static function getCanonicalName( $name, $validate = 'valid' ) {
+// <IntraACL>
+		# Disable IntraACL title check as the main and/or
+		# user namespaces may be protected
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$hacl = haclfDisableTitlePatch();
+		}
+// </IntraACL>
+
 		# Force usernames to capital
 		global $wgContLang;
 		$name = $wgContLang->ucfirst( $name );
@@ -762,6 +794,9 @@ class User {
 			Title::newFromText( $name ) : Title::makeTitle( NS_USER, $name );
 		# Check for invalid titles
 		if( is_null( $t ) ) {
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			return false;
 		}
 
@@ -790,6 +825,9 @@ class User {
 			default:
 				throw new MWException( 'Invalid parameter value for $validate in ' . __METHOD__ );
 		}
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $hacl );
+		}
 		return $name;
 	}
 
@@ -3320,7 +3358,13 @@ class User {
 	 */
 	protected function getTokenUrl( $page, $token ) {
 		// Hack to bypass localization of 'Special:'
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$hacl = haclfDisableTitlePatch();
+		}
 		$title = Title::makeTitle( NS_MAIN, "Special:$page/$token" );
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch($hacl);
+		}
 		return $title->getCanonicalUrl();
 	}
 
diff --git a/includes/UserMailer.php b/includes/UserMailer.php
index 63f5bf2..205bf34 100644
--- a/includes/UserMailer.php
+++ b/includes/UserMailer.php
@@ -461,7 +461,10 @@ class EmailNotification {
 					if ( $watchingUser->getOption( 'enotifwatchlistpages' ) &&
 						( !$minorEdit || $watchingUser->getOption( 'enotifminoredits' ) ) &&
 						$watchingUser->isEmailConfirmed() &&
-						$watchingUser->getID() != $userTalkId )
+						$watchingUser->getID() != $userTalkId &&
+// <IntraACL>
+						!$title->getUserPermissionsErrors( 'read', $watchingUser ) ) // Check IntraACL read access
+// </IntraACL>
 					{
 						$this->compose( $watchingUser );
 					}
@@ -472,7 +475,12 @@ class EmailNotification {
 		global $wgUsersNotifiedOnAllChanges;
 		foreach ( $wgUsersNotifiedOnAllChanges as $name ) {
 			$user = User::newFromName( $name );
-			$this->compose( $user );
+// <IntraACL>
+			if ( !$title->getUserPermissionsErrors( 'read', $user ) ) {
+				// Check IntraACL read access
+				$this->compose( $user );
+			}
+// </IntraACL>
 		}
 
 		$this->sendMails();
diff --git a/includes/api/ApiExpandTemplates.php b/includes/api/ApiExpandTemplates.php
index dfa520a..e9c44c8 100644
--- a/includes/api/ApiExpandTemplates.php
+++ b/includes/api/ApiExpandTemplates.php
@@ -51,7 +51,9 @@ class ApiExpandTemplates extends ApiBase {
 
 		// Create title for parser
 		$title_obj = Title::newFromText( $params['title'] );
-		if ( !$title_obj ) {
+		// <IntraACL>
+		if ( !$title_obj || !$title_obj->userCanRead() ) {
+		// </IntraACL>
 			$title_obj = Title::newFromText( 'API' ); // default
 		}
 
diff --git a/includes/api/ApiMove.php b/includes/api/ApiMove.php
index a0b7bcb..9df7fe4 100644
--- a/includes/api/ApiMove.php
+++ b/includes/api/ApiMove.php
@@ -60,13 +60,17 @@ class ApiMove extends ApiBase {
 			}
 		}
 
-		if ( !$fromTitle->exists() ) {
+		// <IntraACL>
+		if ( !$fromTitle->exists() || !$fromTitle->userCanRead() ) {
+		// </IntraACL>
 			$this->dieUsageMsg( 'notanarticle' );
 		}
 		$fromTalk = $fromTitle->getTalkPage();
 
 		$toTitle = Title::newFromText( $params['to'] );
-		if ( !$toTitle ) {
+		// <IntraACL>
+		if ( !$toTitle || !$toTitle->userCanRead() ) {
+		// </IntraACL>
 			$this->dieUsageMsg( array( 'invalidtitle', $params['to'] ) );
 		}
 		$toTalk = $toTitle->getTalkPage();
diff --git a/includes/api/ApiPageSet.php b/includes/api/ApiPageSet.php
index 4718221..118ba3c 100644
--- a/includes/api/ApiPageSet.php
+++ b/includes/api/ApiPageSet.php
@@ -373,6 +373,11 @@ class ApiPageSet extends ApiQueryBase {
 	public function processDbRow( $row ) {
 		// Store Title object in various data structures
 		$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+		// <IntraACL>
+		if ( !$title->userCanRead() ) {
+			return;
+		}
+		// </IntraACL>
 
 		$pageId = intval( $row->page_id );
 		$this->mAllPages[$row->page_namespace][$row->page_title] = $pageId;
@@ -635,6 +640,11 @@ class ApiPageSet extends ApiQueryBase {
 			$from = $this->mPendingRedirectIDs[$rdfrom]->getPrefixedText();
 			$to = Title::makeTitle( $row->rd_namespace, $row->rd_title, $row->rd_fragment, $row->rd_interwiki );
 			unset( $this->mPendingRedirectIDs[$rdfrom] );
+			// <IntraACL>
+			if ( !$to->userCanRead() ) {
+				continue;
+			}
+			// </IntraACL>
 			if ( !isset( $this->mAllPages[$row->rd_namespace][$row->rd_title] ) ) {
 				$lb->add( $row->rd_namespace, $row->rd_title );
 			}
@@ -673,7 +683,9 @@ class ApiPageSet extends ApiQueryBase {
 
 		foreach ( $titles as $title ) {
 			$titleObj = is_string( $title ) ? Title::newFromText( $title ) : $title;
-			if ( !$titleObj ) {
+			// <IntraACL>
+			if ( !$titleObj || !$titleObj->userCanRead() ) {
+			// </IntraACL>
 				// Handle invalid titles gracefully
 				$this->mAllpages[0][$title] = $this->mFakePageId;
 				$this->mInvalidTitles[$this->mFakePageId] = $title;
diff --git a/includes/api/ApiParse.php b/includes/api/ApiParse.php
index a315918..941a7dd 100644
--- a/includes/api/ApiParse.php
+++ b/includes/api/ApiParse.php
@@ -93,6 +93,11 @@ class ApiParse extends ApiBase {
 				}
 
 				$titleObj = $rev->getTitle();
+				// <IntraACL>
+				if ( !$titleObj->userCanRead() ) {
+					$this->dieUsage( "You are not allowed to read this article", 'permissiondenied' );
+				}
+				// </IntraACL>
 
 				$wgTitle = $titleObj;
 
@@ -153,6 +158,11 @@ class ApiParse extends ApiBase {
 				} elseif ( !$titleObj || !$titleObj->exists() ) {
 					$this->dieUsage( "The page you specified doesn't exist", 'missingtitle' );
 				}
+				// <IntraACL>
+				if ( !$titleObj->userCanRead() ) {
+					$this->dieUsage( "You are not allowed to read this article", 'permissiondenied' );
+				}
+				// </IntraACL>
 				$wgTitle = $titleObj;
 
 				$articleObj = new Article( $titleObj, 0 );
@@ -170,7 +180,9 @@ class ApiParse extends ApiBase {
 			}
 			$this->text = $text;
 			$titleObj = Title::newFromText( $title );
-			if ( !$titleObj ) {
+			// <IntraACL>
+			if ( !$titleObj || !$titleObj->userCanRead() ) {
+			// </IntraACL>
 				$this->dieUsageMsg( array( 'invalidtitle', $title ) );
 			}
 			$wgTitle = $titleObj;
diff --git a/includes/api/ApiPurge.php b/includes/api/ApiPurge.php
index ac5f020..72dc458 100644
--- a/includes/api/ApiPurge.php
+++ b/includes/api/ApiPurge.php
@@ -56,7 +56,9 @@ class ApiPurge extends ApiBase {
 		foreach ( $params['titles'] as $t ) {
 			$r = array();
 			$title = Title::newFromText( $t );
-			if ( !$title instanceof Title ) {
+			// <IntraACL>
+			if ( !$title instanceof Title || !$title->userCanRead() ) {
+			// </IntraACL>
 				$r['title'] = $t;
 				$r['invalid'] = '';
 				$result[] = $r;
diff --git a/includes/api/ApiQueryAllCategories.php b/includes/api/ApiQueryAllCategories.php
index fc56965..f90a857 100644
--- a/includes/api/ApiQueryAllCategories.php
+++ b/includes/api/ApiQueryAllCategories.php
@@ -111,6 +111,11 @@ class ApiQueryAllCategories extends ApiQueryGeneratorBase {
 
 			// Normalize titles
 			$titleObj = Title::makeTitle( NS_CATEGORY, $row->cat_title );
+			// <IntraACL>
+			if ( !$titleObj->userCanRead() ) {
+				continue;
+			}
+			// </IntraACL>
 			if ( !is_null( $resultPageSet ) ) {
 				$pages[] = $titleObj->getPrefixedText();
 			} else {
diff --git a/includes/api/ApiQueryAllLinks.php b/includes/api/ApiQueryAllLinks.php
index 822d013..36dbf5c 100644
--- a/includes/api/ApiQueryAllLinks.php
+++ b/includes/api/ApiQueryAllLinks.php
@@ -135,8 +135,13 @@ class ApiQueryAllLinks extends ApiQueryGeneratorBase {
 				if ( $fld_ids ) {
 					$vals['fromid'] = intval( $row->pl_from );
 				}
+				$title = Title::makeTitle( $params['namespace'], $row->pl_title );
+				// <IntraACL>
+				if ( !$title->userCanRead() ) {
+					continue;
+				}
+				// </IntraACL>
 				if ( $fld_title ) {
-					$title = Title::makeTitle( $params['namespace'], $row->pl_title );
 					ApiQueryBase::addTitleInfo( $vals, $title );
 				}
 				$fit = $result->addValue( array( 'query', $this->getModuleName() ), null, $vals );
diff --git a/includes/api/ApiQueryAllimages.php b/includes/api/ApiQueryAllimages.php
index f0fc39e..97cc0f0 100644
--- a/includes/api/ApiQueryAllimages.php
+++ b/includes/api/ApiQueryAllimages.php
@@ -160,6 +160,11 @@ class ApiQueryAllimages extends ApiQueryGeneratorBase {
 
 			if ( is_null( $resultPageSet ) ) {
 				$file = $repo->newFileFromRow( $row );
+				// <IntraACL>
+				if ( !$file->getTitle()->userCanRead() ) {
+					continue;
+				}
+				// </IntraACL>
 				$info = array_merge( array( 'name' => $row->img_name ),
 					ApiQueryImageInfo::getInfo( $file, $prop, $result ) );
 				self::addTitleInfo( $info, $file->getTitle() );
diff --git a/includes/api/ApiQueryAllmessages.php b/includes/api/ApiQueryAllmessages.php
index d636c61..b1af161 100644
--- a/includes/api/ApiQueryAllmessages.php
+++ b/includes/api/ApiQueryAllmessages.php
@@ -53,7 +53,9 @@ class ApiQueryAllmessages extends ApiQueryBase {
 		if ( $params['enableparser'] ) {
 			if ( !is_null( $params['title'] ) ) {
 				$title = Title::newFromText( $params['title'] );
-				if ( !$title ) {
+				// <IntraACL>
+				if ( !$title || !$title->userCanRead() ) {
+				// </IntraACL>
 					$this->dieUsageMsg( array( 'invalidtitle', $params['title'] ) );
 				}
 			} else {
diff --git a/includes/api/ApiQueryAllpages.php b/includes/api/ApiQueryAllpages.php
index 4a21667..ef601e2 100644
--- a/includes/api/ApiQueryAllpages.php
+++ b/includes/api/ApiQueryAllpages.php
@@ -182,6 +182,11 @@ class ApiQueryAllpages extends ApiQueryGeneratorBase {
 
 			if ( is_null( $resultPageSet ) ) {
 				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCanRead() ) {
+					continue;
+				}
+				// </IntraACL>
 				$vals = array(
 					'pageid' => intval( $row->page_id ),
 					'ns' => intval( $title->getNamespace() ),
diff --git a/includes/api/ApiQueryBacklinks.php b/includes/api/ApiQueryBacklinks.php
index 8e2639f..4193937 100644
--- a/includes/api/ApiQueryBacklinks.php
+++ b/includes/api/ApiQueryBacklinks.php
@@ -263,7 +263,12 @@ class ApiQueryBacklinks extends ApiQueryGeneratorBase {
 			} else {
 				$this->pageMap[$row->page_namespace][$row->page_title] = $row->page_id;
 				if ( $row->page_is_redirect ) {
-					$this->redirTitles[] = Title::makeTitle( $row->page_namespace, $row->page_title );
+					$redir = Title::makeTitle( $row->page_namespace, $row->page_title );
+					// <IntraACL>
+					if ( $redir->userCanRead() ) {
+						$this->redirTitles[] = $redir;
+					}
+					// </IntraACL>
 				}
 
 				$resultPageSet->processDbRow( $row );
@@ -347,6 +352,11 @@ class ApiQueryBacklinks extends ApiQueryGeneratorBase {
 	private function extractRowInfo( $row ) {
 		$this->pageMap[$row->page_namespace][$row->page_title] = $row->page_id;
 		$t = Title::makeTitle( $row->page_namespace, $row->page_title );
+		// <IntraACL>
+		if ( !$t->userCanRead() ) {
+			continue;
+		}
+		// </IntraACL>
 		$a = array( 'pageid' => intval( $row->page_id ) );
 		ApiQueryBase::addTitleInfo( $a, $t );
 		if ( $row->page_is_redirect ) {
@@ -359,7 +369,13 @@ class ApiQueryBacklinks extends ApiQueryGeneratorBase {
 
 	private function extractRedirRowInfo( $row ) {
 		$a['pageid'] = intval( $row->page_id );
-		ApiQueryBase::addTitleInfo( $a, Title::makeTitle( $row->page_namespace, $row->page_title ) );
+		$t = Title::makeTitle( $row->page_namespace, $row->page_title );
+		// <IntraACL>
+		if ( !$t->userCanRead() ) {
+			continue;
+		}
+		// </IntraACL>
+		ApiQueryBase::addTitleInfo( $a, $t );
 		if ( $row->page_is_redirect ) {
 			$a['redirect'] = '';
 		}
diff --git a/includes/api/ApiQueryCategories.php b/includes/api/ApiQueryCategories.php
index a6bca69..dd66d74 100644
--- a/includes/api/ApiQueryCategories.php
+++ b/includes/api/ApiQueryCategories.php
@@ -79,7 +79,7 @@ class ApiQueryCategories extends ApiQueryGeneratorBase {
 			$cats = array();
 			foreach ( $params['categories'] as $cat ) {
 				$title = Title::newFromText( $cat );
-				if ( !$title || $title->getNamespace() != NS_CATEGORY ) {
+				if ( !$title || $title->getNamespace() != NS_CATEGORY || !$title->userCanRead() ) {
 					$this->setWarning( "``$cat'' is not a category" );
 				} else {
 					$cats[] = $title->getDBkey();
@@ -148,6 +148,11 @@ class ApiQueryCategories extends ApiQueryGeneratorBase {
 				}
 
 				$title = Title::makeTitle( NS_CATEGORY, $row->cl_to );
+				// <IntraACL>
+				if ( !$title->userCanRead() ) {
+					continue;
+				}
+				// </IntraACL>
 				$vals = array();
 				ApiQueryBase::addTitleInfo( $vals, $title );
 				if ( isset( $prop['sortkey'] ) ) {
diff --git a/includes/api/ApiQueryCategoryMembers.php b/includes/api/ApiQueryCategoryMembers.php
index c916f5c..666e571 100644
--- a/includes/api/ApiQueryCategoryMembers.php
+++ b/includes/api/ApiQueryCategoryMembers.php
@@ -229,8 +229,13 @@ class ApiQueryCategoryMembers extends ApiQueryGeneratorBase {
 				if ( $fld_ids ) {
 					$vals['pageid'] = intval( $row->page_id );
 				}
+				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCanRead() ) {
+					continue;
+				}
+				// </IntraACL>
 				if ( $fld_title ) {
-					$title = Title::makeTitle( $row->page_namespace, $row->page_title );
 					ApiQueryBase::addTitleInfo( $vals, $title );
 				}
 				if ( $fld_sortkey ) {
diff --git a/includes/api/ApiQueryDeletedrevs.php b/includes/api/ApiQueryDeletedrevs.php
index e226070..e72011e 100644
--- a/includes/api/ApiQueryDeletedrevs.php
+++ b/includes/api/ApiQueryDeletedrevs.php
@@ -228,6 +228,11 @@ class ApiQueryDeletedrevs extends ApiQueryBase {
 			}
 
 			$title = Title::makeTitle( $row->ar_namespace, $row->ar_title );
+			// <IntraACL>
+			if ( !$title->userCanRead() ) {
+				continue;
+			}
+			// </IntraACL>
 
 			if ( $fld_parsedcomment ) {
 				$rev['parsedcomment'] = $wgUser->getSkin()->formatComment( $row->ar_comment, $title );
diff --git a/includes/api/ApiQueryExtLinksUsage.php b/includes/api/ApiQueryExtLinksUsage.php
index a2b2e31..8e7329f 100644
--- a/includes/api/ApiQueryExtLinksUsage.php
+++ b/includes/api/ApiQueryExtLinksUsage.php
@@ -121,8 +121,13 @@ class ApiQueryExtLinksUsage extends ApiQueryGeneratorBase {
 				if ( $fld_ids ) {
 					$vals['pageid'] = intval( $row->page_id );
 				}
+				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCanRead() ) {
+					continue;
+				}
+				// </IntraACL>
 				if ( $fld_title ) {
-					$title = Title::makeTitle( $row->page_namespace, $row->page_title );
 					ApiQueryBase::addTitleInfo( $vals, $title );
 				}
 				if ( $fld_url ) {
diff --git a/includes/api/ApiQueryFilearchive.php b/includes/api/ApiQueryFilearchive.php
index e746a6c..5fc38ed 100644
--- a/includes/api/ApiQueryFilearchive.php
+++ b/includes/api/ApiQueryFilearchive.php
@@ -140,6 +140,11 @@ class ApiQueryFilearchive extends ApiQueryBase {
 			$file = array();
 			$file['name'] = $row->fa_name;
 			$title = Title::makeTitle( NS_FILE, $row->fa_name );
+			// <IntraACL>
+			if ( !$title->userCanRead() ) {
+				continue;
+			}
+			// </IntraACL>
 			self::addTitleInfo( $file, $title );
 
 			if ( $fld_sha1 ) {
diff --git a/includes/api/ApiQueryIWBacklinks.php b/includes/api/ApiQueryIWBacklinks.php
index 8b3c8af..a746b35 100644
--- a/includes/api/ApiQueryIWBacklinks.php
+++ b/includes/api/ApiQueryIWBacklinks.php
@@ -122,6 +122,11 @@ class ApiQueryIWBacklinks extends ApiQueryGeneratorBase {
 				$entry = array( 'pageid' => $row->page_id );
 
 				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCanRead() ) {
+					continue;
+				}
+				// </IntraACL>
 				ApiQueryBase::addTitleInfo( $entry, $title );
 
 				if ( $row->page_is_redirect ) {
diff --git a/includes/api/ApiQueryImages.php b/includes/api/ApiQueryImages.php
index 5fbdc89..923ac49 100644
--- a/includes/api/ApiQueryImages.php
+++ b/includes/api/ApiQueryImages.php
@@ -91,7 +91,7 @@ class ApiQueryImages extends ApiQueryGeneratorBase {
 			$images = array();
 			foreach ( $params['images'] as $img ) {
 				$title = Title::newFromText( $img );
-				if ( !$title || $title->getNamespace() != NS_FILE ) {
+				if ( !$title || $title->getNamespace() != NS_FILE || !$title->userCanRead() ) {
 					$this->setWarning( "``$img'' is not a file" );
 				} else {
 					$images[] = $title->getDBkey();
@@ -113,7 +113,13 @@ class ApiQueryImages extends ApiQueryGeneratorBase {
 					break;
 				}
 				$vals = array();
-				ApiQueryBase::addTitleInfo( $vals, Title::makeTitle( NS_FILE, $row->il_to ) );
+				$title = Title::makeTitle( NS_FILE, $row->il_to );
+				// <IntraACL>
+				if ( !$title->userCanRead() ) {
+					continue;
+				}
+				// </IntraACL>
+				ApiQueryBase::addTitleInfo( $vals, $title );
 				$fit = $this->addPageSubItem( $row->il_from, $vals );
 				if ( !$fit ) {
 					$this->setContinueEnumParameter( 'continue', $row->il_from .
diff --git a/includes/api/ApiQueryInfo.php b/includes/api/ApiQueryInfo.php
index c2f4dc9..e9a7fbf 100644
--- a/includes/api/ApiQueryInfo.php
+++ b/includes/api/ApiQueryInfo.php
@@ -263,14 +263,20 @@ class ApiQueryInfo extends ApiQueryBase {
 						'value returned by the previous query', '_badcontinue' );
 			}
 			$conttitle = Title::makeTitleSafe( $cont[0], $cont[1] );
-			foreach ( $this->everything as $pageid => $title ) {
-				if ( Title::compare( $title, $conttitle ) >= 0 ) {
-					break;
+			// <IntraACL>
+			if ( $conttitle && $conttitle->userCanRead() ) {
+			// </IntraACL>
+				foreach ( $this->everything as $pageid => $title ) {
+					if ( Title::compare( $title, $conttitle ) >= 0 ) {
+						break;
+					}
+					unset( $this->titles[$pageid] );
+					unset( $this->missing[$pageid] );
+					unset( $this->everything[$pageid] );
 				}
-				unset( $this->titles[$pageid] );
-				unset( $this->missing[$pageid] );
-				unset( $this->everything[$pageid] );
+			// <IntraACL>
 			}
+			// </IntraACL>
 		}
 
 		$this->pageRestrictions = $pageSet->getCustomField( 'page_restrictions' );
diff --git a/includes/api/ApiQueryLangBacklinks.php b/includes/api/ApiQueryLangBacklinks.php
index 959ee78..53d025e 100644
--- a/includes/api/ApiQueryLangBacklinks.php
+++ b/includes/api/ApiQueryLangBacklinks.php
@@ -122,6 +122,11 @@ class ApiQueryLangBacklinks extends ApiQueryGeneratorBase {
 				$entry = array( 'pageid' => $row->page_id );
 
 				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCanRead() ) {
+					continue;
+				}
+				// </IntraACL>
 				ApiQueryBase::addTitleInfo( $entry, $title );
 
 				if ( $row->page_is_redirect ) {
diff --git a/includes/api/ApiQueryLinks.php b/includes/api/ApiQueryLinks.php
index 55217e2..e5838f0 100644
--- a/includes/api/ApiQueryLinks.php
+++ b/includes/api/ApiQueryLinks.php
@@ -101,7 +101,7 @@ class ApiQueryLinks extends ApiQueryGeneratorBase {
 			$lb = new LinkBatch;
 			foreach ( $params[$this->titlesParam] as $t ) {
 				$title = Title::newFromText( $t );
-				if ( !$title ) {
+				if ( !$title || !$title->userCanRead() ) {
 					$this->setWarning( "``$t'' is not a valid title" );
 				} else {
 					$lb->addObj( $title );
@@ -163,7 +163,13 @@ class ApiQueryLinks extends ApiQueryGeneratorBase {
 					break;
 				}
 				$vals = array();
-				ApiQueryBase::addTitleInfo( $vals, Title::makeTitle( $row->pl_namespace, $row->pl_title ) );
+				$title = Title::makeTitle( $row->pl_namespace, $row->pl_title );
+				// <IntraACL>
+				if ( !$title->userCanRead() ) {
+					continue;
+				}
+				// </IntraACL>
+				ApiQueryBase::addTitleInfo( $vals, $title );
 				$fit = $this->addPageSubItem( $row->pl_from, $vals );
 				if ( !$fit ) {
 					$this->setContinueEnumParameter( 'continue',
diff --git a/includes/api/ApiQueryLogEvents.php b/includes/api/ApiQueryLogEvents.php
index 669ab71..cb8905d 100644
--- a/includes/api/ApiQueryLogEvents.php
+++ b/includes/api/ApiQueryLogEvents.php
@@ -134,7 +134,9 @@ class ApiQueryLogEvents extends ApiQueryBase {
 		$title = $params['title'];
 		if ( !is_null( $title ) ) {
 			$titleObj = Title::newFromText( $title );
-			if ( is_null( $titleObj ) ) {
+			// <IntraACL>
+			if ( is_null( $titleObj ) || !$titleObj->userCanRead() ) {
+			// </IntraACL>
 				$this->dieUsage( "Bad title value '$title'", 'param_title' );
 			}
 			$this->addWhereFld( 'log_namespace', $titleObj->getNamespace() );
@@ -262,9 +264,12 @@ class ApiQueryLogEvents extends ApiQueryBase {
 			$vals['pageid'] = intval( $row->page_id );
 		}
 
-		if ( $this->fld_title || $this->fld_parsedcomment ) {
-			$title = Title::makeTitle( $row->log_namespace, $row->log_title );
+		$title = Title::makeTitle( $row->log_namespace, $row->log_title );
+		// <IntraACL>
+		if ( !$title->userCanRead() ) {
+			return false;
 		}
+		// </IntraACL>
 
 		if ( $this->fld_title ) {
 			if ( LogEventsList::isDeleted( $row, LogPage::DELETED_ACTION ) ) {
diff --git a/includes/api/ApiQueryProtectedTitles.php b/includes/api/ApiQueryProtectedTitles.php
index ff703cd..afeeac5 100644
--- a/includes/api/ApiQueryProtectedTitles.php
+++ b/includes/api/ApiQueryProtectedTitles.php
@@ -93,6 +93,11 @@ class ApiQueryProtectedTitles extends ApiQueryGeneratorBase {
 
 			$title = Title::makeTitle( $row->pt_namespace, $row->pt_title );
 			if ( is_null( $resultPageSet ) ) {
+				// <IntraACL>
+				if ( !$title->userCanRead() ) {
+					continue;
+				}
+				// </IntraACL>
 				$vals = array();
 				ApiQueryBase::addTitleInfo( $vals, $title );
 				if ( isset( $prop['timestamp'] ) ) {
diff --git a/includes/api/ApiQueryQueryPage.php b/includes/api/ApiQueryQueryPage.php
index b38df6b..68f42b6 100644
--- a/includes/api/ApiQueryQueryPage.php
+++ b/includes/api/ApiQueryQueryPage.php
@@ -116,6 +116,11 @@ class ApiQueryQueryPage extends ApiQueryGeneratorBase {
 
 			$title = Title::makeTitle( $row->namespace, $row->title );
 			if ( is_null( $resultPageSet ) ) {
+				// <IntraACL>
+				if ( !$title->userCanRead() ) {
+					continue;
+				}
+				// </IntraACL>
 				$data = array( 'value' => $row->value );
 				if ( $qp->usesTimestamps() ) {
 					$data['timestamp'] = wfTimestamp( TS_ISO_8601, $row->value );
diff --git a/includes/api/ApiQueryRandom.php b/includes/api/ApiQueryRandom.php
index dea0b0f..a6b3e5c 100644
--- a/includes/api/ApiQueryRandom.php
+++ b/includes/api/ApiQueryRandom.php
@@ -85,9 +85,13 @@ class ApiQueryRandom extends ApiQueryGeneratorBase {
 			if ( is_null( $resultPageSet ) ) {
 				// Prevent duplicates
 				if ( !in_array( $row->page_id, $this->pageIDs ) ) {
+					$info = $this->extractRowInfo( $row );
+					if ( !$info ) {
+						continue;
+					}
 					$fit = $this->getResult()->addValue(
 							array( 'query', $this->getModuleName() ),
-							null, $this->extractRowInfo( $row ) );
+							null, $info );
 					if ( !$fit ) {
 						// We can't really query-continue a random list.
 						// Return an insanely high value so
@@ -131,6 +135,11 @@ class ApiQueryRandom extends ApiQueryGeneratorBase {
 
 	private function extractRowInfo( $row ) {
 		$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+		// <IntraACL>
+		if ( !$title->userCanRead() ) {
+			return false;
+		}
+		// </IntraACL>
 		$vals = array();
 		$vals['id'] = intval( $row->page_id );
 		ApiQueryBase::addTitleInfo( $vals, $title );
diff --git a/includes/api/ApiQueryRecentChanges.php b/includes/api/ApiQueryRecentChanges.php
index 9ce6688..451788a 100644
--- a/includes/api/ApiQueryRecentChanges.php
+++ b/includes/api/ApiQueryRecentChanges.php
@@ -321,6 +321,11 @@ class ApiQueryRecentChanges extends ApiQueryGeneratorBase {
 
 		/* Determine the title of the page that has been changed. */
 		$title = Title::makeTitle( $row->rc_namespace, $row->rc_title );
+		// <IntraACL>
+		if ( !$title->userCanRead() ) {
+			continue;
+		}
+		// </IntraACL>
 
 		/* Our output data. */
 		$vals = array();
diff --git a/includes/api/ApiQuerySearch.php b/includes/api/ApiQuerySearch.php
index 5c133b7..948164f 100644
--- a/includes/api/ApiQuerySearch.php
+++ b/includes/api/ApiQuerySearch.php
@@ -132,6 +132,12 @@ class ApiQuerySearch extends ApiQueryGeneratorBase {
 
 			$title = $result->getTitle();
 			if ( is_null( $resultPageSet ) ) {
+				// <IntraACL>
+				if ( !$title->userCanRead() ) {
+					$result = $matches->next();
+					continue;
+				}
+				// </IntraACL>
 				$vals = array();
 				ApiQueryBase::addTitleInfo( $vals, $title );
 
diff --git a/includes/api/ApiQueryUserContributions.php b/includes/api/ApiQueryUserContributions.php
index f6a9fe4..5657349 100644
--- a/includes/api/ApiQueryUserContributions.php
+++ b/includes/api/ApiQueryUserContributions.php
@@ -104,6 +104,9 @@ class ApiQueryContributions extends ApiQueryBase {
 			}
 
 			$vals = $this->extractRowInfo( $row );
+			if ( !$vals ) {
+				continue;
+			}
 			$fit = $this->getResult()->addValue( array( 'query', $this->getModuleName() ), null, $vals );
 			if ( !$fit ) {
 				if ( $this->multiUserMode ) {
@@ -291,6 +294,11 @@ class ApiQueryContributions extends ApiQueryBase {
 		}
 
 		$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+		// <IntraACL>
+		if ( !$title || !$title->userCanRead() ) {
+			return false;
+		}
+		// </IntraACL>
 
 		if ( $this->fld_title ) {
 			ApiQueryBase::addTitleInfo( $vals, $title );
diff --git a/includes/api/ApiQueryWatchlist.php b/includes/api/ApiQueryWatchlist.php
index 77ecb90..bcb1e65 100644
--- a/includes/api/ApiQueryWatchlist.php
+++ b/includes/api/ApiQueryWatchlist.php
@@ -204,6 +204,11 @@ class ApiQueryWatchlist extends ApiQueryGeneratorBase {
 
 			if ( is_null( $resultPageSet ) ) {
 				$vals = $this->extractRowInfo( $row );
+				// <IntraACL>
+				if ( !$vals ) {
+					continue;
+				}
+				// </IntraACL>
 				$fit = $this->getResult()->addValue( array( 'query', $this->getModuleName() ), null, $vals );
 				if ( !$fit ) {
 					$this->setContinueEnumParameter( 'start',
@@ -238,6 +243,11 @@ class ApiQueryWatchlist extends ApiQueryGeneratorBase {
 		}
 
 		$title = Title::makeTitle( $row->rc_namespace, $row->rc_title );
+		// <IntraACL>
+		if ( !$title || !$title->userCanRead() ) {
+			return false;
+		}
+		// </IntraACL>
 
 		if ( $this->fld_title ) {
 			ApiQueryBase::addTitleInfo( $vals, $title );
diff --git a/includes/api/ApiQueryWatchlistRaw.php b/includes/api/ApiQueryWatchlistRaw.php
index 126f6d8..b398222 100644
--- a/includes/api/ApiQueryWatchlistRaw.php
+++ b/includes/api/ApiQueryWatchlistRaw.php
@@ -110,6 +110,11 @@ class ApiQueryWatchlistRaw extends ApiQueryGeneratorBase {
 			$t = Title::makeTitle( $row->wl_namespace, $row->wl_title );
 
 			if ( is_null( $resultPageSet ) ) {
+				// <IntraACL>
+				if ( !$t || !$t->userCanRead() ) {
+					return false;
+				}
+				// </IntraACL>
 				$vals = array();
 				ApiQueryBase::addTitleInfo( $vals, $t );
 				if ( isset( $prop['changed'] ) && !is_null( $row->wl_notificationtimestamp ) )
diff --git a/includes/cache/LinkBatch.php b/includes/cache/LinkBatch.php
index 0bd869f..4e6a62b 100644
--- a/includes/cache/LinkBatch.php
+++ b/includes/cache/LinkBatch.php
@@ -119,6 +119,11 @@ class LinkBatch {
 		if ( !$res ) {
 			return array();
 		}
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$etc = haclfDisableTitlePatch();
+		}
+		// </IntraACL>
 
 		// For each returned entry, add it to the list of good links, and remove it from $remaining
 
@@ -139,6 +144,11 @@ class LinkBatch {
 				$ids[$title->getPrefixedDBkey()] = 0;
 			}
 		}
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $etc );
+		}
+		// </IntraACL>
 		return $ids;
 	}
 
diff --git a/includes/diff/DifferenceEngine.php b/includes/diff/DifferenceEngine.php
index 5902461..0319176 100644
--- a/includes/diff/DifferenceEngine.php
+++ b/includes/diff/DifferenceEngine.php
@@ -1010,6 +1010,13 @@ CONTROL;
 			return false;
 		}
 
+		// <IntraACL>
+		if ( !$this->mNewRev->getTitle()->userCanRead() ) {
+			$this->mNewRev = false;
+			return false;
+		}
+		// </IntraACL>
+
 		// Update the new revision ID in case it was 0 (makes life easier doing UI stuff)
 		$this->mNewid = $this->mNewRev->getId();
 
@@ -1083,6 +1090,13 @@ CONTROL;
 
 		if ( $this->mOldRev ) {
 			$this->mOldPage = $this->mOldRev->getTitle();
+			// <IntraACL>
+			if ( !$this->mOldRev->getTitle()->userCanRead() ) {
+				$this->mOldid = false;
+				$this->mOldRev = false;
+				return false;
+			}
+			// </IntraACL>
 
 			$t = $wgLang->timeanddate( $this->mOldRev->getTimestamp(), true );
 			$dateofrev = $wgLang->date( $this->mOldRev->getTimestamp(), true );
diff --git a/includes/filerepo/LocalFile.php b/includes/filerepo/LocalFile.php
index 14da912..d5acacb 100644
--- a/includes/filerepo/LocalFile.php
+++ b/includes/filerepo/LocalFile.php
@@ -85,6 +85,11 @@ class LocalFile extends File {
 	 */
 	static function newFromRow( $row, $repo ) {
 		$title = Title::makeTitle( NS_FILE, $row->img_name );
+		// <IntraACL>
+		if ( !$title->userCan( 'read' ) ) {
+			return NULL;
+		}
+		// </IntraACL>
 		$file = new self( $title, $repo );
 		$file->loadFromRow( $row );
 
diff --git a/includes/filerepo/LocalRepo.php b/includes/filerepo/LocalRepo.php
index 9089f4d..0ffffce 100644
--- a/includes/filerepo/LocalRepo.php
+++ b/includes/filerepo/LocalRepo.php
@@ -194,7 +194,12 @@ class LocalRepo extends FSRepo {
 		
 		$result = array();
 		foreach ( $res as $row ) {
-			$result[] = $this->newFileFromRow( $row );
+			$file = $this->newFileFromRow( $row );
+			// <IntraACL>
+			if ( $file !== NULL ) {
+				$result[] = $file;
+			}
+			// </IntraACL>
 		}
 		$res->free();
 
diff --git a/includes/parser/LinkHolderArray.php b/includes/parser/LinkHolderArray.php
index 5418b6e..53fab05 100644
--- a/includes/parser/LinkHolderArray.php
+++ b/includes/parser/LinkHolderArray.php
@@ -55,6 +55,12 @@ class LinkHolderArray {
 	 * Recreate the Title objects
 	 */
 	function __wakeup() {
+		// <IntraACL>
+		// LinkHolderArray skips permission checks so page links in parsed content are never cloaked
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$etc = haclfDisableTitlePatch();
+		}
+		// </IntraACL>
 		foreach ( $this->internals as &$nsLinks ) {
 			foreach ( $nsLinks as &$entry ) {
 				$entry['title'] = Title::newFromText( $entry['pdbk'] );
@@ -67,6 +73,11 @@ class LinkHolderArray {
 			$entry['title'] = Title::newFromText( $entry['pdbk'] );
 		}
 		unset( $entry );
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $etc );
+		}
+		// </IntraACL>
 	}
 
 	/**
@@ -266,6 +277,12 @@ class LinkHolderArray {
 
 		$linkcolour_ids = array();
 
+		// <IntraACL>
+		// LinkHolderArray skips permission checks so page links in parsed content are never cloaked
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$etc = haclfDisableTitlePatch();
+		}
+		// </IntraACL>
 		# Generate query
 		$queries = array();
 		foreach ( $this->internals as $ns => $entries ) {
@@ -386,6 +403,11 @@ class LinkHolderArray {
 
 		wfProfileOut( __METHOD__.'-replace' );
 		wfProfileOut( __METHOD__ );
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $etc );
+		}
+		// </IntraACL>
 	}
 
 	/**
diff --git a/includes/parser/Parser.php b/includes/parser/Parser.php
index 939d9e3..277ed91 100644
--- a/includes/parser/Parser.php
+++ b/includes/parser/Parser.php
@@ -1738,7 +1738,18 @@ class Parser {
 
 			wfProfileOut( __METHOD__."-misc" );
 			wfProfileIn( __METHOD__."-title" );
+			// <IntraACL>
+			// Do not check permissions for links, except image links
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			$nt = Title::newFromText( $this->mStripState->unstripNoWiki( $link ) );
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 			if ( $nt === null ) {
 				$s .= $prefix . '[[' . $line;
 				wfProfileOut( __METHOD__."-title" );
@@ -1821,7 +1832,10 @@ class Parser {
 
 				if ( $ns == NS_FILE ) {
 					wfProfileIn( __METHOD__."-image" );
-					if ( !wfIsBadImage( $nt->getDBkey(), $this->mTitle ) ) {
+					// <IntraACL>
+					if ( !wfIsBadImage( $nt->getDBkey(), $this->mTitle ) &&
+						( $canRead = $nt->userCanRead() ) ) {
+					// </IntraACL>
 						if ( $wasblank ) {
 							# if no parameters were passed, $text
 							# becomes something like "File:Foo.png",
@@ -1838,6 +1852,13 @@ class Parser {
 						# cloak any absolute URLs inside the image markup, so replaceExternalLinks() won't touch them
 						$s .= $prefix . $this->armorLinks(
 							$this->makeImage( $nt, $text, $holders ) ) . $trail;
+					// <IntraACL>
+					} elseif ( !$canRead ) {
+						# Still register dependency on a nonreadable image
+						$time = $sha1 = $descQuery = false;
+						list( $file, $nt ) = $this->fetchFileAndTitle( $nt, $time, $sha1 );
+						$s .= $prefix . $trail;
+					// </IntraACL>
 					} else {
 						$s .= $prefix . $trail;
 					}
@@ -3100,7 +3121,18 @@ class Parser {
 			if ( $subpage !== '' ) {
 				$ns = $this->mTitle->getNamespace();
 			}
+			// <IntraACL>
+			// Template access check is done below, after loading
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			$title = Title::newFromText( $part1, $ns );
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 			if ( $title ) {
 				$titleText = $title->getPrefixedText();
 				# Check for language variants if the template is not found
@@ -3136,11 +3168,25 @@ class Parser {
 					$found = false; # access denied
 					wfDebug( __METHOD__.": template inclusion denied for " . $title->getPrefixedDBkey() );
 				} else {
-					list( $text, $title ) = $this->getTemplateDom( $title );
+					list( $text, $title, $canRead ) = $this->getTemplateDom( $title );
 					if ( $text !== false ) {
 						$found = true;
 						$isChildObj = true;
 					}
+					// <IntraACL>
+					if ( $text !== false && !$canRead ) {
+						// Expand templates to always get correct templatelinks,
+						// even if current user has no access to some templates
+						global $haclgInclusionDeniedMessage;
+						$this->getPreprocessor()->newFrame()->expand( $text, 0 );
+						if ( $haclgInclusionDeniedMessage ) {
+							$text = wfMsg( $haclgInclusionDeniedMessage );
+						} elseif ( $haclgInclusionDeniedMessage === '' ) {
+							$text = '';
+						}
+						$isChildObj = false;
+					}
+					// </IntraACL>
 				}
 
 				# If the title is valid but undisplayable, make a link to it
@@ -3266,32 +3312,36 @@ class Parser {
 			$titleText = $title->getPrefixedDBkey();
 		}
 		if ( isset( $this->mTplDomCache[$titleText] ) ) {
-			return array( $this->mTplDomCache[$titleText], $title );
+			$dom = $this->mTplDomCache[$titleText];
+			if ( !$dom ) {
+				return array( false, $title, true );
+			}
+			return array( $dom[0], $title, $dom[1] );
 		}
 
 		# Cache miss, go to the database
-		list( $text, $title ) = $this->fetchTemplateAndTitle( $title );
+		list( $text, $title, $canRead ) = $this->fetchTemplateAndTitle( $title );
 
 		if ( $text === false ) {
 			$this->mTplDomCache[$titleText] = false;
-			return array( false, $title );
+			return array( false, $title, $canRead );
 		}
 
 		$dom = $this->preprocessToDom( $text, self::PTD_FOR_INCLUSION );
-		$this->mTplDomCache[ $titleText ] = $dom;
+		$this->mTplDomCache[ $titleText ] = array( $dom, $canRead );
 
 		if ( !$title->equals( $cacheTitle ) ) {
 			$this->mTplRedirCache[$cacheTitle->getPrefixedDBkey()] =
 				array( $title->getNamespace(), $cdb = $title->getDBkey() );
 		}
 
-		return array( $dom, $title );
+		return array( $dom, $title, $canRead );
 	}
 
 	/**
 	 * Fetch the unparsed text of a template and register a reference to it.
 	 * @param Title $title
-	 * @return Array ( string or false, Title )
+	 * @return Array ( string or false, Title, boolean )
 	 */
 	function fetchTemplateAndTitle( $title ) {
 		$templateCb = $this->mOptions->getTemplateCallback(); # Defaults to Parser::statelessFetchTemplate()
@@ -3303,7 +3353,7 @@ class Parser {
 				$this->mOutput->addTemplate( $dep['title'], $dep['page_id'], $dep['rev_id'] );
 			}
 		}
-		return array( $text, $finalTitle );
+		return array( $text, $finalTitle, $stuff['canRead'] );
 	}
 
 	/**
@@ -3313,7 +3363,7 @@ class Parser {
 	 */
 	function fetchTemplate( $title ) {
 		$rv = $this->fetchTemplateAndTitle( $title );
-		return $rv[0];
+		return $rv[2] ? $rv[0] : '';
 	}
 
 	/**
@@ -3326,6 +3376,7 @@ class Parser {
 		$text = $skip = false;
 		$finalTitle = $title;
 		$deps = array();
+		$canRead = true;
 
 		# Loop to fetch the article, with up to 1 redirect
 		for ( $i = 0; $i < 2 && is_object( $title ); $i++ ) {
@@ -3334,6 +3385,7 @@ class Parser {
 			wfRunHooks( 'BeforeParserFetchTemplateAndtitle',
 				array( $parser, $title, &$skip, &$id ) );
 
+			$canRead = $canRead && $title->userCanRead();
 			if ( $skip ) {
 				$text = false;
 				$deps[] = array(
@@ -3343,11 +3395,21 @@ class Parser {
 				);
 				break;
 			}
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			# Get the revision
 			$rev = $id
 				? Revision::newFromId( $id )
 				: Revision::newFromTitle( $title );
 			$rev_id = $rev ? $rev->getId() : 0;
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 			# If there is no current revision, there is no page
 			if ( $id === false && !$rev ) {
 				$linkCache = LinkCache::singleton();
@@ -3384,9 +3446,20 @@ class Parser {
 			}
 			# Redirect?
 			$finalTitle = $title;
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			$title = Title::newFromRedirect( $text );
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 		}
 		return array(
+			'canRead' => $canRead,
 			'text' => $text,
 			'finalTitle' => $finalTitle,
 			'deps' => $deps );
diff --git a/includes/parser/ParserCache.php b/includes/parser/ParserCache.php
index dcbf7a4..ebf1bf3 100644
--- a/includes/parser/ParserCache.php
+++ b/includes/parser/ParserCache.php
@@ -50,6 +50,9 @@ class ParserCache {
 		$pageid = $article->getID();
 		$renderkey = (int)($wgRequest->getVal('action') == 'render');
 
+		// Needed for IntraACL >= 2.03 to modify parser cache key for correct permissions
+		wfRunHooks( 'ParserOutputRenderKey', array( $article, &$renderkey ) );
+
 		$key = wfMemcKey( 'pcache', 'idhash', "{$pageid}-{$renderkey}!{$hash}" );
 		return $key;
 	}
diff --git a/includes/specials/SpecialAllpages.php b/includes/specials/SpecialAllpages.php
index a9cbf3a..63a3ac4 100644
--- a/includes/specials/SpecialAllpages.php
+++ b/includes/specials/SpecialAllpages.php
@@ -336,6 +336,11 @@ class SpecialAllpages extends IncludableSpecialPage {
 				$out = Xml::openElement( 'table', array( 'class' => 'mw-allpages-table-chunk' ) );
 				while( ( $n < $this->maxPerPage ) && ( $s = $res->fetchObject() ) ) {
 					$t = Title::newFromRow( $s );
+// <IntraACL>
+					if ( $t && !$t->userCanReadEx() ) {
+						continue;
+					}
+// </IntraACL>
 					if( $t ) {
 						$link = ( $s->page_is_redirect ? '<div class="allpagesredirect">' : '' ) .
 							$sk->link( $t ) .
diff --git a/includes/specials/SpecialAncientpages.php b/includes/specials/SpecialAncientpages.php
index cbb5df8..00fcc3b 100644
--- a/includes/specials/SpecialAncientpages.php
+++ b/includes/specials/SpecialAncientpages.php
@@ -39,7 +39,7 @@ class AncientPagesPage extends QueryPage {
 	function isSyndicated() { return false; }
 
 	function getQueryInfo() {
-		return array(
+		$query = array(
 			'tables' => array( 'page', 'revision' ),
 			'fields' => array( 'page_namespace AS namespace',
 					'page_title AS title',
@@ -48,6 +48,10 @@ class AncientPagesPage extends QueryPage {
 					'page_is_redirect' => 0,
 					'page_latest=rev_id' )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function usesTimestamps() {
diff --git a/includes/specials/SpecialBrokenRedirects.php b/includes/specials/SpecialBrokenRedirects.php
index 2330c89..81008fb 100644
--- a/includes/specials/SpecialBrokenRedirects.php
+++ b/includes/specials/SpecialBrokenRedirects.php
@@ -42,7 +42,7 @@ class BrokenRedirectsPage extends PageQueryPage {
 	}
 
 	function getQueryInfo() {
-		return array(
+		$query = array(
 			'tables' => array( 'redirect', 'p1' => 'page',
 					'p2' => 'page' ),
 			'fields' => array( 'p1.page_namespace AS namespace',
@@ -62,6 +62,10 @@ class BrokenRedirectsPage extends PageQueryPage {
 					) )
 			)
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'p1', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialCategories.php b/includes/specials/SpecialCategories.php
index 91d98b8..c7aa02f 100644
--- a/includes/specials/SpecialCategories.php
+++ b/includes/specials/SpecialCategories.php
@@ -71,12 +71,16 @@ class CategoryPager extends AlphabeticPager {
 	}
 
 	function getQueryInfo() {
-		return array(
+		$query = array(
 			'tables' => array( 'category' ),
 			'fields' => array( 'cat_title','cat_pages' ),
 			'conds' => array( 'cat_pages > 0' ),
-			'options' => array( 'USE INDEX' => 'cat_title' ),
+			'options' => array( 'USE INDEX' => array( 'category' => 'cat_title' ) ),
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_title=cat_title' ), NS_CATEGORY ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getTitle() {
diff --git a/includes/specials/SpecialDeadendpages.php b/includes/specials/SpecialDeadendpages.php
index f8ef4d4..03ebeee 100644
--- a/includes/specials/SpecialDeadendpages.php
+++ b/includes/specials/SpecialDeadendpages.php
@@ -57,7 +57,7 @@ class DeadendPagesPage extends PageQueryPage {
 	}
 
 	function getQueryInfo() {
-		return array(
+		$query = array(
 			'tables' => array( 'page', 'pagelinks' ),
 			'fields' => array( 'page_namespace AS namespace',
 					'page_title AS title',
@@ -71,6 +71,10 @@ class DeadendPagesPage extends PageQueryPage {
 					'page_id=pl_from'
 			) ) )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getOrderFields() {
diff --git a/includes/specials/SpecialDoubleRedirects.php b/includes/specials/SpecialDoubleRedirects.php
index ec899d8..2513720 100644
--- a/includes/specials/SpecialDoubleRedirects.php
+++ b/includes/specials/SpecialDoubleRedirects.php
@@ -64,6 +64,9 @@ class DoubleRedirectsPage extends PageQueryPage {
 			$retval['conds']['pa.page_namespace'] = $namespace;
 			$retval['conds']['pa.page_title'] = $title;
 		}
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$retval, 'pa', NULL, NULL ) );
+		// </IntraACL>
 		return $retval;
 	}
 
diff --git a/includes/specials/SpecialFewestrevisions.php b/includes/specials/SpecialFewestrevisions.php
index 6d621a2..774312a 100644
--- a/includes/specials/SpecialFewestrevisions.php
+++ b/includes/specials/SpecialFewestrevisions.php
@@ -42,7 +42,7 @@ class FewestrevisionsPage extends QueryPage {
 	}
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'revision', 'page' ),
 			'fields' => array ( 'page_namespace AS namespace',
 					'page_title AS title',
@@ -58,6 +58,10 @@ class FewestrevisionsPage extends QueryPage {
 			// redirects.
 			'GROUP BY' => 'page_namespace, page_title, page_is_redirect' )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_title=tl_title', 'page_namespace=tl_namespace' ), NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 
diff --git a/includes/specials/SpecialFilepath.php b/includes/specials/SpecialFilepath.php
index 08f90fd..2da957d 100644
--- a/includes/specials/SpecialFilepath.php
+++ b/includes/specials/SpecialFilepath.php
@@ -42,7 +42,9 @@ class SpecialFilepath extends SpecialPage {
 
 		$title = Title::newFromText( $file, NS_FILE );
 
-		if ( ! $title instanceof Title || $title->getNamespace() != NS_FILE ) {
+		// <IntraACL>
+		if ( ! $title instanceof Title || $title->getNamespace() != NS_FILE || !$title->userCanRead() ) {
+		// </IntraACL>
 			$this->showForm( $title );
 		} else {
 			$file = wfFindFile( $title );
diff --git a/includes/specials/SpecialListfiles.php b/includes/specials/SpecialListfiles.php
index 427de16..61741ec 100644
--- a/includes/specials/SpecialListfiles.php
+++ b/includes/specials/SpecialListfiles.php
@@ -167,13 +167,18 @@ class ImageListPager extends TablePager {
 			}
 			$join_conds = array( 'oldimage' => array( 'LEFT JOIN', 'oi_name = img_name' ) );
 		}
-		return array(
+
+		$info = array(
 			'tables'     => $tables,
 			'fields'     => $fields,
 			'conds'      => $this->mQueryConds,
 			'options'    => $options,
 			'join_conds' => $join_conds
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$info, 'page', array( 'page_title=img_name' ), NS_FILE ) );
+		// </IntraACL>
+		return $info;
 	}
 
 	function getDefaultSort() {
@@ -196,6 +201,18 @@ class ImageListPager extends TablePager {
 		return parent::getStartBody();
 	}
 
+	function formatRow( $row ) {
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$filePage = Title::makeTitleSafe( NS_FILE, $row->img_name );
+			if ( $filePage && !$filePage->userCanRead() ) {
+				return '';
+			}
+		}
+		// </IntraACL>
+		return parent::formatRow( $row );
+	}
+
 	function formatValue( $field, $value ) {
 		global $wgLang;
 		switch ( $field ) {
diff --git a/includes/specials/SpecialListredirects.php b/includes/specials/SpecialListredirects.php
index acf5fbd..a4c7cc4 100644
--- a/includes/specials/SpecialListredirects.php
+++ b/includes/specials/SpecialListredirects.php
@@ -39,7 +39,7 @@ class ListredirectsPage extends QueryPage {
 	function sortDescending() { return false; }
 
 	function getQueryInfo() {
-		return array(
+		$query = array(
 			'tables' => array( 'p1' => 'page', 'redirect', 'p2' => 'page' ),
 			'fields' => array( 'p1.page_namespace AS namespace',
 					'p1.page_title AS title',
@@ -55,6 +55,10 @@ class ListredirectsPage extends QueryPage {
 					'p2.page_namespace=rd_namespace',
 					'p2.page_title=rd_title' ) ) )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'p1', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getOrderFields() {
@@ -108,6 +112,11 @@ class ListredirectsPage extends QueryPage {
 		# Find out where the redirect leads
 		$target = $this->getRedirectTarget( $result );
 		if( $target ) {
+// <IntraACL>
+			if ( !$target->userCanReadEx() ) {
+				return '';
+			}
+// </IntraACL>
 			global $wgLang;
 			# Make a link to the destination page
 			$arr = $wgLang->getArrow() . $wgLang->getDirMark();
diff --git a/includes/specials/SpecialLonelypages.php b/includes/specials/SpecialLonelypages.php
index 0800e43..17ab7e5 100644
--- a/includes/specials/SpecialLonelypages.php
+++ b/includes/specials/SpecialLonelypages.php
@@ -47,7 +47,7 @@ class LonelyPagesPage extends PageQueryPage {
 	function isSyndicated() { return false; }
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'page', 'pagelinks',
 					'templatelinks' ),
 			'fields' => array ( 'page_namespace AS namespace',
@@ -67,6 +67,10 @@ class LonelyPagesPage extends PageQueryPage {
 						'tl_namespace = page_namespace',
 						'tl_title = page_title' ) ) )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getOrderFields() {
diff --git a/includes/specials/SpecialMostcategories.php b/includes/specials/SpecialMostcategories.php
index 2e43719..bb7ca3e 100644
--- a/includes/specials/SpecialMostcategories.php
+++ b/includes/specials/SpecialMostcategories.php
@@ -39,7 +39,7 @@ class MostcategoriesPage extends QueryPage {
 	function isSyndicated() { return false; }
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'categorylinks', 'page' ),
 			'fields' => array ( 'page_namespace AS namespace',
 					'page_title AS title',
@@ -50,6 +50,10 @@ class MostcategoriesPage extends QueryPage {
 			'join_conds' => array ( 'page' => array ( 'LEFT JOIN',
 					'page_id = cl_from' ) )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialMostimages.php b/includes/specials/SpecialMostimages.php
index ac2b520..5d71878 100644
--- a/includes/specials/SpecialMostimages.php
+++ b/includes/specials/SpecialMostimages.php
@@ -39,7 +39,7 @@ class MostimagesPage extends ImageQueryPage {
 	function isSyndicated() { return false; }
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'imagelinks' ),
 			'fields' => array ( "'" . NS_FILE . "' AS namespace",
 					'il_to AS title',
@@ -47,6 +47,10 @@ class MostimagesPage extends ImageQueryPage {
 			'options' => array ( 'GROUP BY' => 'il_to',
 					'HAVING' => 'COUNT(*) > 1' )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_title=il_to' ), NS_FILE ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getCellHtml( $row ) {
diff --git a/includes/specials/SpecialMostlinked.php b/includes/specials/SpecialMostlinked.php
index 58f686e..d247ff6 100644
--- a/includes/specials/SpecialMostlinked.php
+++ b/includes/specials/SpecialMostlinked.php
@@ -40,7 +40,7 @@ class MostlinkedPage extends QueryPage {
 	function isSyndicated() { return false; }
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'pagelinks', 'page' ),
 			'fields' => array ( 'pl_namespace AS namespace',
 					'pl_title AS title',
@@ -53,6 +53,10 @@ class MostlinkedPage extends QueryPage {
 					array ( 'page_namespace = pl_namespace',
 						'page_title = pl_title' ) ) )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialMostlinkedcategories.php b/includes/specials/SpecialMostlinkedcategories.php
index 195282f..8197fe0 100644
--- a/includes/specials/SpecialMostlinkedcategories.php
+++ b/includes/specials/SpecialMostlinkedcategories.php
@@ -39,13 +39,17 @@ class MostlinkedCategoriesPage extends QueryPage {
 	function isSyndicated() { return false; }
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'categorylinks' ),
 			'fields' => array ( 'cl_to AS title',
 					NS_CATEGORY . ' AS namespace',
 					'COUNT(*) AS value' ),
 			'options' => array ( 'GROUP BY' => 'cl_to' )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_title=cat_title' ), NS_CATEGORY ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function sortDescending() { return true; }
diff --git a/includes/specials/SpecialMostlinkedtemplates.php b/includes/specials/SpecialMostlinkedtemplates.php
index 6977192..4f04940 100644
--- a/includes/specials/SpecialMostlinkedtemplates.php
+++ b/includes/specials/SpecialMostlinkedtemplates.php
@@ -62,7 +62,7 @@ class MostlinkedTemplatesPage extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'templatelinks' ),
 			'fields' => array ( 'tl_namespace AS namespace',
 					'tl_title AS title',
@@ -70,6 +70,10 @@ class MostlinkedTemplatesPage extends QueryPage {
 			'conds' => array ( 'tl_namespace' => NS_TEMPLATE ),
 			'options' => array( 'GROUP BY' => 'tl_namespace, tl_title' )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_title=tl_title', 'page_namespace=tl_namespace' ), NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialNewimages.php b/includes/specials/SpecialNewimages.php
index ea20c2f..681f9f3 100644
--- a/includes/specials/SpecialNewimages.php
+++ b/includes/specials/SpecialNewimages.php
@@ -97,6 +97,10 @@ class NewFilesPager extends ReverseChronologicalPager {
 			'conds' => $conds
 		);
 
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_title=img_name' ), NS_FILE ) );
+		// </IntraACL>
+
 		return $query;
 	}
 
diff --git a/includes/specials/SpecialNewpages.php b/includes/specials/SpecialNewpages.php
index bf9fb9f..9d43016 100644
--- a/includes/specials/SpecialNewpages.php
+++ b/includes/specials/SpecialNewpages.php
@@ -305,6 +305,11 @@ class SpecialNewpages extends IncludableSpecialPage {
 		$dm = $wgLang->getDirMark();
 
 		$title = Title::makeTitleSafe( $result->rc_namespace, $result->rc_title );
+// <IntraACL>
+		if ( !$title->userCanReadEx() ) {
+			return '';
+		}
+// </IntraACL>
 		$time = Html::element( 'span', array( 'class' => 'mw-newpages-time' ),
 			$wgLang->timeAndDate( $result->rc_timestamp, true )
 		);
@@ -559,6 +564,10 @@ class NewPagesPager extends ReverseChronologicalPager {
 			$this->opts['tagfilter']
 		);
 
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+
 		return $info;
 	}
 
diff --git a/includes/specials/SpecialPopularpages.php b/includes/specials/SpecialPopularpages.php
index 7c7190a..bd8f4d4 100644
--- a/includes/specials/SpecialPopularpages.php
+++ b/includes/specials/SpecialPopularpages.php
@@ -39,13 +39,17 @@ class PopularPagesPage extends QueryPage {
 	function isSyndicated() { return false; }
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array( 'page' ),
 			'fields' => array( 'page_namespace AS namespace',
 					'page_title AS title',
 					'page_counter AS value'),
 			'conds' => array( 'page_is_redirect' => 0,
 					'page_namespace' => MWNamespace::getContentNamespaces() ) );
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialPrefixindex.php b/includes/specials/SpecialPrefixindex.php
index 28be4da..ef9638f 100644
--- a/includes/specials/SpecialPrefixindex.php
+++ b/includes/specials/SpecialPrefixindex.php
@@ -167,6 +167,11 @@ class SpecialPrefixindex extends SpecialAllpages {
 
 				while( ( $n < $this->maxPerPage ) && ( $s = $res->fetchObject() ) ) {
 					$t = Title::makeTitle( $s->page_namespace, $s->page_title );
+/*op-patch|TS|2009-06-19|HaloACL|SafeTitle|start*/
+					if ($t && !$t->userCanReadEx()) {
+						continue; 
+					}
+/*op-patch|TS|2009-06-19|end*/  
 					if( $t ) {
 						$link = ($s->page_is_redirect ? '<div class="allpagesredirect">' : '' ) .
 							$sk->linkKnown(
diff --git a/includes/specials/SpecialProtectedpages.php b/includes/specials/SpecialProtectedpages.php
index b1f61f0..61277d7 100644
--- a/includes/specials/SpecialProtectedpages.php
+++ b/includes/specials/SpecialProtectedpages.php
@@ -352,11 +352,15 @@ class ProtectedPagesPager extends AlphabeticPager {
 			$conds[] = 'pr_level=' . $this->mDb->addQuotes( $this->level );
 		if( !is_null($this->namespace) )
 			$conds[] = 'page_namespace=' . $this->mDb->addQuotes( $this->namespace );
-		return array(
+		$query = array(
 			'tables' => array( 'page_restrictions', 'page' ),
 			'fields' => 'pr_id,page_namespace,page_title,page_len,pr_type,pr_level,pr_expiry,pr_cascade',
 			'conds' => $conds
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getIndexField() {
diff --git a/includes/specials/SpecialRandompage.php b/includes/specials/SpecialRandompage.php
index e299dc7..3dcc2f5 100644
--- a/includes/specials/SpecialRandompage.php
+++ b/includes/specials/SpecialRandompage.php
@@ -68,6 +68,10 @@ class RandomPage extends SpecialPage {
 			$wgOut->addWikiMsg( strtolower( $this->mName ) . '-nopages',
 				$this->getNsList(), count( $this->namespaces ) );
 			return;
+		} elseif ( method_exists( $title, 'userCanReadEx' ) && !$title->userCanReadEx() ) {
+			$article = new Article( $title );
+			$article->view();
+			return;
 		}
 
 		$redirectParam = $this->isRedirect() ? array( 'redirect' => 'no' ) : array();
diff --git a/includes/specials/SpecialRecentchanges.php b/includes/specials/SpecialRecentchanges.php
index 6c78ced..1693aa4 100644
--- a/includes/specials/SpecialRecentchanges.php
+++ b/includes/specials/SpecialRecentchanges.php
@@ -482,10 +482,15 @@ class SpecialRecentChanges extends IncludableSpecialPage {
 
 		$s = $list->beginRecentChangesList();
 		foreach( $rows as $obj ) {
+// <IntraACL>
+			$rc = RecentChange::newFromRow( $obj );
+			if ( !$rc->getTitle()->userCanReadEx() ) {
+				continue;
+			}
+// </IntraACL>
 			if( $limit == 0 ) {
 				break;
 			}
-			$rc = RecentChange::newFromRow( $obj );
 			$rc->counter = $counter++;
 			# Check if the page has been updated since the last visit
 			if( $wgShowUpdatedMarker && !empty( $obj->wl_notificationtimestamp ) ) {
diff --git a/includes/specials/SpecialSearch.php b/includes/specials/SpecialSearch.php
index ba9d378..b2bb685 100644
--- a/includes/specials/SpecialSearch.php
+++ b/includes/specials/SpecialSearch.php
@@ -480,7 +480,14 @@ class SpecialSearch extends SpecialPage {
 		}
 		$out .= "<ul class='mw-search-results'>\n";
 		while( $result = $matches->next() ) {
-			$out .= $this->showHit( $result, $terms );
+/*op-patch|TS|2011-02-08|HaloACL|SafeTitle|start*/
+			if (($result->getTitle() != NULL) 
+			    && ($result->getTitle()->userCanReadEx())) {
+/*op-patch|TS|2011-02-08|end*/  
+				$out .= $this->showHit( $result, $terms );
+/*op-patch|TS|2011-02-08|HaloACL|SafeTitle|start*/
+			}
+/*op-patch|TS|2011-02-08|end*/  
 		}
 		$out .= "</ul>\n";
 
diff --git a/includes/specials/SpecialShortpages.php b/includes/specials/SpecialShortpages.php
index 3b78501..77abf57 100644
--- a/includes/specials/SpecialShortpages.php
+++ b/includes/specials/SpecialShortpages.php
@@ -46,7 +46,7 @@ class ShortPagesPage extends QueryPage {
 	}
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'page' ),
 			'fields' => array ( 'page_namespace AS namespace',
 					'page_title AS title',
@@ -55,6 +55,10 @@ class ShortPagesPage extends QueryPage {
 					'page_is_redirect' => 0 ),
 			'options' => array ( 'USE INDEX' => 'page_len' )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getOrderFields() {
diff --git a/includes/specials/SpecialSpecialpages.php b/includes/specials/SpecialSpecialpages.php
index 13bc4c2..2e684f7 100644
--- a/includes/specials/SpecialSpecialpages.php
+++ b/includes/specials/SpecialSpecialpages.php
@@ -61,7 +61,9 @@ class SpecialSpecialpages extends UnlistedSpecialPage {
 		/** Put them into a sortable array */
 		$groups = array();
 		foreach ( $pages as $page ) {
-			if ( $page->isListed() ) {
+			// <IntraACL>
+			if ( $page->isListed() && $page->getTitle()->userCanRead() ) {
+			// </IntraACL>
 				$group = SpecialPageFactory::getGroup( $page );
 				if( !isset( $groups[$group] ) ) {
 					$groups[$group] = array();
diff --git a/includes/specials/SpecialUncategorizedimages.php b/includes/specials/SpecialUncategorizedimages.php
index 3efed74..fed2ed1 100644
--- a/includes/specials/SpecialUncategorizedimages.php
+++ b/includes/specials/SpecialUncategorizedimages.php
@@ -47,7 +47,7 @@ class UncategorizedImagesPage extends ImageQueryPage {
 	}
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array( 'page', 'categorylinks' ),
 			'fields' => array( 'page_namespace AS namespace',
 					'page_title AS title',
@@ -58,6 +58,10 @@ class UncategorizedImagesPage extends ImageQueryPage {
 			'join_conds' => array( 'categorylinks' => array(
 					'LEFT JOIN', 'cl_from=page_id' ) )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 }
diff --git a/includes/specials/SpecialUncategorizedpages.php b/includes/specials/SpecialUncategorizedpages.php
index 08a6944..18b67a5 100644
--- a/includes/specials/SpecialUncategorizedpages.php
+++ b/includes/specials/SpecialUncategorizedpages.php
@@ -44,7 +44,7 @@ class UncategorizedPagesPage extends PageQueryPage {
 	function isSyndicated() { return false; }
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'page', 'categorylinks' ),
 			'fields' => array ( 'page_namespace AS namespace',
 					'page_title AS title',
@@ -57,6 +57,10 @@ class UncategorizedPagesPage extends PageQueryPage {
 			'join_conds' => array ( 'categorylinks' => array (
 					'LEFT JOIN', 'cl_from = page_id' ) )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getOrderFields() {
diff --git a/includes/specials/SpecialUnusedcategories.php b/includes/specials/SpecialUnusedcategories.php
index e4b8e54..d404dbf 100644
--- a/includes/specials/SpecialUnusedcategories.php
+++ b/includes/specials/SpecialUnusedcategories.php
@@ -37,7 +37,7 @@ class UnusedCategoriesPage extends QueryPage {
 	}
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'page', 'categorylinks' ),
 			'fields' => array ( 'page_namespace AS namespace',
 					'page_title AS title',
@@ -48,6 +48,10 @@ class UnusedCategoriesPage extends QueryPage {
 			'join_conds' => array ( 'categorylinks' => array (
 					'LEFT JOIN', 'cl_to = page_title' ) )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialUnusedimages.php b/includes/specials/SpecialUnusedimages.php
index 6407de4..706a60a 100644
--- a/includes/specials/SpecialUnusedimages.php
+++ b/includes/specials/SpecialUnusedimages.php
@@ -69,6 +69,11 @@ class UnusedimagesPage extends ImageQueryPage {
 			$retval['join_conds']['imagelinks'] = array (
 					'LEFT JOIN', 'il_to = page_title' );
 		}
+
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$retval, 'page', array( 'page_title=img_name' ), NS_FILE ) );
+		// </IntraACL>
+
 		return $retval;
 	}
 
diff --git a/includes/specials/SpecialUnusedtemplates.php b/includes/specials/SpecialUnusedtemplates.php
index da50160..38a66d5 100644
--- a/includes/specials/SpecialUnusedtemplates.php
+++ b/includes/specials/SpecialUnusedtemplates.php
@@ -40,7 +40,7 @@ class UnusedtemplatesPage extends QueryPage {
 	function sortDescending() { return false; }
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'page', 'templatelinks' ),
 			'fields' => array ( 'page_namespace AS namespace',
 					'page_title AS title',
@@ -52,6 +52,10 @@ class UnusedtemplatesPage extends QueryPage {
 				'LEFT JOIN', array ( 'tl_title = page_title',
 					'tl_namespace = page_namespace' ) ) )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialUnwatchedpages.php b/includes/specials/SpecialUnwatchedpages.php
index 0f11140..dacc3db 100644
--- a/includes/specials/SpecialUnwatchedpages.php
+++ b/includes/specials/SpecialUnwatchedpages.php
@@ -39,7 +39,7 @@ class UnwatchedpagesPage extends QueryPage {
 	function isSyndicated() { return false; }
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'page', 'watchlist' ),
 			'fields' => array ( 'page_namespace AS namespace',
 					'page_title AS title',
@@ -52,6 +52,10 @@ class UnwatchedpagesPage extends QueryPage {
 				'LEFT JOIN', array ( 'wl_title = page_title',
 					'wl_namespace = page_namespace' ) ) )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function sortDescending() { return false; }
diff --git a/includes/specials/SpecialUpload.php b/includes/specials/SpecialUpload.php
index 33013e0..52fbbf1 100644
--- a/includes/specials/SpecialUpload.php
+++ b/includes/specials/SpecialUpload.php
@@ -351,6 +351,8 @@ class SpecialUpload extends SpecialPage {
 	 * 	warnings and the should continue processing like there was no warning
 	 */
 	protected function showUploadWarning( $warnings ) {
+		wfRunHooks( 'SpecialUploadCheckWarnings', array( $this, &$warnings ) );
+
 		# If there are no warnings, or warnings we can ignore, return early.
 		# mDestWarningAck is set when some javascript has shown the warning
 		# to the user. mForReUpload is set when the user clicks the "upload a
diff --git a/includes/specials/SpecialUserlogin.php b/includes/specials/SpecialUserlogin.php
index e43f197..6aa4b4f 100644
--- a/includes/specials/SpecialUserlogin.php
+++ b/includes/specials/SpecialUserlogin.php
@@ -835,7 +835,9 @@ class LoginForm extends SpecialPage {
 			$this->displaySuccessfulLogin( 'loginsuccess', $injected_html );
 		} else {
 			$titleObj = Title::newFromText( $this->mReturnTo );
-			if ( !$titleObj instanceof Title ) {
+/*patch|2011-04-05|IntraACL|start*/
+			if ( !$titleObj instanceof Title || method_exists( $titleObj, 'userCanReadEx' ) && !$titleObj->userCanReadEx() ) {
+/*patch|2011-04-05|IntraACL|end*/
 				$titleObj = Title::newMainPage();
 			}
 			$redirectUrl = $titleObj->getFullURL( $this->mReturnToQuery );
diff --git a/includes/specials/SpecialWantedcategories.php b/includes/specials/SpecialWantedcategories.php
index 800e940..baedc2e 100644
--- a/includes/specials/SpecialWantedcategories.php
+++ b/includes/specials/SpecialWantedcategories.php
@@ -35,7 +35,7 @@ class WantedCategoriesPage extends WantedQueryPage {
 	}
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'categorylinks', 'page' ),
 			'fields' => array ( "'" . NS_CATEGORY . "' AS namespace",
 					'cl_to AS title',
@@ -46,6 +46,10 @@ class WantedCategoriesPage extends WantedQueryPage {
 				array ( 'page_title = cl_to',
 					'page_namespace' => NS_CATEGORY ) ) )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialWantedfiles.php b/includes/specials/SpecialWantedfiles.php
index 8a4fe56..595ae0e 100644
--- a/includes/specials/SpecialWantedfiles.php
+++ b/includes/specials/SpecialWantedfiles.php
@@ -46,7 +46,7 @@ class WantedFilesPage extends WantedQueryPage {
 	}
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'imagelinks', 'image' ),
 			'fields' => array ( "'" . NS_FILE . "' AS namespace",
 					'il_to AS title',
@@ -59,5 +59,9 @@ class WantedFilesPage extends WantedQueryPage {
 				)
 			)
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_title=img_name' ), NS_FILE ) );
+		// </IntraACL>
+		return $query;
 	}
 }
diff --git a/includes/specials/SpecialWantedpages.php b/includes/specials/SpecialWantedpages.php
index a423315..ebe67e9 100644
--- a/includes/specials/SpecialWantedpages.php
+++ b/includes/specials/SpecialWantedpages.php
@@ -85,6 +85,9 @@ class WantedPagesPage extends WantedQueryPage {
 		);
 		// Replacement for the WantedPages::getSQL hook
 		wfRunHooks( 'WantedPages::getQueryInfo', array( &$this, &$query ) );
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'pg1', NULL, NULL ) );
+		// </IntraACL>
 		return $query;
 	}
 }
diff --git a/includes/specials/SpecialWantedtemplates.php b/includes/specials/SpecialWantedtemplates.php
index ab9d604..e6dbf32 100644
--- a/includes/specials/SpecialWantedtemplates.php
+++ b/includes/specials/SpecialWantedtemplates.php
@@ -38,7 +38,7 @@ class WantedTemplatesPage extends WantedQueryPage {
 	}
 
 	function getQueryInfo() {
-		return array (
+		$query = array (
 			'tables' => array ( 'templatelinks', 'page' ),
 			'fields' => array ( 'tl_namespace AS namespace',
 					'tl_title AS title',
@@ -51,5 +51,9 @@ class WantedTemplatesPage extends WantedQueryPage {
 					array ( 'page_namespace = tl_namespace',
 						'page_title = tl_title' ) ) )
 		);
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 }
diff --git a/includes/specials/SpecialWatchlist.php b/includes/specials/SpecialWatchlist.php
index fd562be..a75f5cb 100644
--- a/includes/specials/SpecialWatchlist.php
+++ b/includes/specials/SpecialWatchlist.php
@@ -388,6 +388,11 @@ class SpecialWatchlist extends SpecialPage {
 		foreach ( $res as $obj ) {
 			# Make RC entry
 			$rc = RecentChange::newFromRow( $obj );
+// <IntraACL>
+			if ( !$rc->getTitle()->userCanReadEx() ) {
+				continue;
+			}
+// </IntraACL>
 			$rc->counter = $counter++;
 
 			if ( $wgShowUpdatedMarker ) {
diff --git a/includes/specials/SpecialWhatlinkshere.php b/includes/specials/SpecialWhatlinkshere.php
index f7d7bfe..f2295a7 100644
--- a/includes/specials/SpecialWhatlinkshere.php
+++ b/includes/specials/SpecialWhatlinkshere.php
@@ -247,6 +247,11 @@ class SpecialWhatLinksHere extends SpecialPage {
 		$out->addHTML( $this->listStart( $level ) );
 		foreach ( $rows as $row ) {
 			$nt = Title::makeTitle( $row->page_namespace, $row->page_title );
+/*op-patch|TS|2009-06-19|HaloACL|SafeTitle|start*/
+			if (!$nt->userCanReadEx()) {
+				continue;
+			}
+/*op-patch|TS|2009-06-19|end*/  
 
 			if ( $row->page_is_redirect && $level < 2 ) {
 				$out->addHTML( $this->listItem( $row, $nt, true ) );
diff --git a/includes/specials/SpecialWithoutinterwiki.php b/includes/specials/SpecialWithoutinterwiki.php
index 9d91b83..6835c70 100644
--- a/includes/specials/SpecialWithoutinterwiki.php
+++ b/includes/specials/SpecialWithoutinterwiki.php
@@ -93,6 +93,9 @@ class WithoutInterwikiPage extends PageQueryPage {
 			$dbr = wfGetDB( DB_SLAVE );
 			$query['conds'][] = 'page_title ' . $dbr->buildLike( $this->prefix, $dbr->anyString() );
 		}
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
 		return $query;
 	}
 }
