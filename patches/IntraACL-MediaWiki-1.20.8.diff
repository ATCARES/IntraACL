Patch: intraacl-rights
Type: feature
MediaWiki: REL1_20 1.20.8 b297b34f6bc72528814d2263b764c9f69dfd8dea

Patch needed for IntraACL extension. Enables read access checks
in various parts of MediaWiki.

2013-03-25 - Do not cloak page and category links in article content
2013-03-29 - Still register dependencies for unreadable images and templates
2013-07-31 - Check permissions for email notifications
2013-08-27 - Check permissions in API
2013-09-25 - Support parser cache key personalisation
2013-12-06 - Use hook for parser cache key personalisation, disable title patch in LinkBatch

diff --git a/includes/CategoryViewer.php b/includes/CategoryViewer.php
index 3bb2bc9..7980757 100644
--- a/includes/CategoryViewer.php
+++ b/includes/CategoryViewer.php
@@ -177,6 +177,11 @@ class CategoryViewer extends ContextSource {
 	 */
 	function addSubcategory( Title $title, $sortkey, $pageLength ) {
 		wfDeprecated( __METHOD__, '1.17' );
+		// <IntraACL>
+		if ( !$title->userCan('read') ) {
+			return;
+		}
+		// </IntraACL>
 		$this->addSubcategoryObject( Category::newFromTitle( $title ), $sortkey, $pageLength );
 	}
 
@@ -243,6 +248,11 @@ class CategoryViewer extends ContextSource {
 	 * @param $isRedirect bool
 	 */
 	function addPage( $title, $sortkey, $pageLength, $isRedirect = false ) {
+		// <IntraACL>
+		if ( !$title->userCan('read') ) {
+			return;
+		}
+		// </IntraACL>
 		global $wgContLang;
 
 		$link = Linker::link( $title );
diff --git a/includes/ChangesFeed.php b/includes/ChangesFeed.php
index ee4c2d6..859cf5e 100644
--- a/includes/ChangesFeed.php
+++ b/includes/ChangesFeed.php
@@ -74,15 +74,16 @@ class ChangesFeed {
 	 * @return null|bool True or null
 	 */
 	public function execute( $feed, $rows, $lastmod, $opts ) {
-		global $wgLang, $wgRenderHashAppend;
+		global $wgLang, $wgRenderHashAppend, $wgUser;
 
 		if ( !FeedUtils::checkFeedOutput( $this->format ) ) {
 			return null;
 		}
 
+		$userid = $wgUser->getId();
 		$optionsHash = md5( serialize( $opts->getAllValues() ) ) . $wgRenderHashAppend;
-		$timekey = wfMemcKey( $this->type, $this->format, $wgLang->getCode(), $optionsHash, 'timestamp' );
-		$key = wfMemcKey( $this->type, $this->format, $wgLang->getCode(), $optionsHash );
+		$timekey = wfMemcKey( $this->type, $this->format, $userid, $wgLang->getCode(), $optionsHash, 'timestamp' );
+		$key = wfMemcKey( $this->type, $this->format, $userid, $wgLang->getCode(), $optionsHash );
 
 		FeedUtils::checkPurge( $timekey, $key );
 
@@ -187,6 +188,11 @@ class ChangesFeed {
 
 		foreach( $sorted as $obj ) {
 			$title = Title::makeTitle( $obj->rc_namespace, $obj->rc_title );
+			// <IntraACL>
+			if ( !$title || !$title->userCan('read') ) {
+				continue;
+			}
+			// </IntraACL>
 			$talkpage = MWNamespace::canTalk( $obj->rc_namespace ) ? $title->getTalkPage()->getFullUrl() : '';
 			// Skip items with deleted content (avoids partially complete/inconsistent output)
 			if( $obj->rc_deleted ) continue;
diff --git a/includes/FeedUtils.php b/includes/FeedUtils.php
index 11b2675..78cdc61 100644
--- a/includes/FeedUtils.php
+++ b/includes/FeedUtils.php
@@ -113,11 +113,9 @@ class FeedUtils {
 					$actiontext,
 					Linker::formatComment( $comment ) ) ) ) . "</p>\n";
 
-		// NOTE: Check permissions for anonymous users, not current user.
-		//       No "privileged" version should end up in the cache.
-		//       Most feed readers will not log in anway.
-		$anon = new User();
-		$accErrors = $title->getUserPermissionsErrors( 'read', $anon, true );
+		// NOTE: Check permissions for current user. -- IntraACL
+		global $wgUser;
+		$accErrors = $title->getUserPermissionsErrors( 'read', $wgUser, true );
 
 		// Can't diff special pages, unreadable pages or pages with no new revision
 		// to compare against: just return the text.
diff --git a/includes/Linker.php b/includes/Linker.php
index 56626bd..4b45669 100644
--- a/includes/Linker.php
+++ b/includes/Linker.php
@@ -1850,6 +1850,10 @@ class Linker {
 						array(),
 						array( 'action' => 'edit' )
 					);
+				// <IntraACL>
+				} elseif ( !$titleObj->userCan('read') ) {
+					continue;
+				// </IntraACL>
 				} else {
 					$editLink = self::link(
 						$titleObj,
diff --git a/includes/OutputPage.php b/includes/OutputPage.php
index b4a81bb..2f97621 100644
--- a/includes/OutputPage.php
+++ b/includes/OutputPage.php
@@ -1163,6 +1163,12 @@ class OutputPage extends ContextSource {
 
 		# Add the remaining categories to the skin
 		if ( wfRunHooks( 'OutputPageMakeCategoryLinks', array( &$this, $categories, &$this->mCategoryLinks ) ) ) {
+			// <IntraACL>
+			// Do not cloak category links during display
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			foreach ( $categories as $category => $type ) {
 				$origcategory = $category;
 				$title = Title::makeTitleSafe( NS_CATEGORY, $category );
@@ -1176,6 +1182,11 @@ class OutputPage extends ContextSource {
 				$this->mCategories[] = $title->getText();
 				$this->mCategoryLinks[$type][] = Linker::link( $title, $text );
 			}
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 		}
 	}
 
@@ -2092,7 +2103,14 @@ class OutputPage extends ContextSource {
 			# not especially useful as a returnto parameter. Use the title
 			# from the request instead, if there was one.
 			$request = $this->getRequest();
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				// IntraACL -- do not produce "&returnto=Access_Denied" links
+				$hacl = haclfDisableTitlePatch();
+			}
 			$returnto = Title::newFromURL( $request->getVal( 'title', '' ) );
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			if ( $action == 'edit' ) {
 				$msg = 'whitelistedittext';
 				$displayReturnto = $returnto;
@@ -2377,7 +2395,9 @@ $templates
 		} else {
 			$titleObj = Title::newFromText( $returnto );
 		}
-		if ( !is_object( $titleObj ) ) {
+		// <IntraACL>
+		if ( !$titleObj instanceof Title || !$titleObj->userCan('read') ) {
+		// </IntraACL>
 			$titleObj = Title::newMainPage();
 		}
 
diff --git a/includes/QueryPage.php b/includes/QueryPage.php
index ac559dc..95c6042 100644
--- a/includes/QueryPage.php
+++ b/includes/QueryPage.php
@@ -373,6 +373,12 @@ abstract class QueryPage extends SpecialPage {
 		if ( is_array( $query ) ) {
 			$tables = isset( $query['tables'] ) ? (array)$query['tables'] : array();
 			$fields = isset( $query['fields'] ) ? (array)$query['fields'] : array();
+			// <IntraACL>
+			if ( in_array( 'page', $tables ) && !isset( $fields['namespace'] ) ) {
+				$fields['namespace'] = 'page_namespace';
+				$fields['title'] = 'page_title';
+			}
+			// </IntraACL>
 			$conds = isset( $query['conds'] ) ? (array)$query['conds'] : array();
 			$options = isset( $query['options'] ) ? (array)$query['options'] : array();
 			$join_conds = isset( $query['join_conds'] ) ? (array)$query['join_conds'] : array();
@@ -585,6 +591,12 @@ abstract class QueryPage extends SpecialPage {
 			# $res might contain the whole 1,000 rows, so we read up to
 			# $num [should update this to use a Pager]
 			for ( $i = 0; $i < $num && $row = $dbr->fetchObject( $res ); $i++ ) {
+				// <IntraACL>
+				$title = Title::makeTitleSafe( $row->namespace, $row->title );
+				if ( !$title || !$title->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
 				$line = $this->formatResult( $skin, $row );
 				if ( $line ) {
 					$attr = ( isset( $row->usepatrol ) && $row->usepatrol && $row->patrolled == 0 )
diff --git a/includes/Title.php b/includes/Title.php
index 1b5e21d..34ce83f 100644
--- a/includes/Title.php
+++ b/includes/Title.php
@@ -105,7 +105,9 @@ class Title {
 		$t = new Title();
 		$t->mDbkeyform = $key;
 		if ( $t->secureAndSplit() ) {
-			return $t;
+			// <IntraACL>
+			return $t->checkAccessControl();
+			// </IntraACL>
 		} else {
 			return null;
 		}
@@ -159,7 +161,9 @@ class Title {
 				$cachedcount++;
 				Title::$titleCache[$text] =& $t;
 			}
-			return $t;
+			// <IntraACL>
+			return $t->checkAccessControl();
+			// </IntraACL>
 		} else {
 			$ret = null;
 			return $ret;
@@ -193,7 +197,9 @@ class Title {
 
 		$t->mDbkeyform = str_replace( ' ', '_', $url );
 		if ( $t->secureAndSplit() ) {
-			return $t;
+			// <IntraACL>
+			return $t->checkAccessControl();
+			// </IntraACL>
 		} else {
 			return null;
 		}
@@ -312,6 +318,9 @@ class Title {
 		$t->mArticleID = ( $ns >= 0 ) ? -1 : 0;
 		$t->mUrlform = wfUrlencode( $t->mDbkeyform );
 		$t->mTextform = str_replace( '_', ' ', $title );
+		// <IntraACL>
+		$t = $t->checkAccessControl();
+		// </IntraACL>
 		return $t;
 	}
 
@@ -334,7 +343,9 @@ class Title {
 		$t = new Title();
 		$t->mDbkeyform = Title::makeName( $ns, $title, $fragment, $interwiki );
 		if ( $t->secureAndSplit() ) {
-			return $t;
+			// <IntraACL>
+			return $t->checkAccessControl();
+			// </IntraACL>
 		} else {
 			return null;
 		}
@@ -4583,4 +4594,68 @@ class Title {
 		}
 		return $pageLang;
 	}
+
+// <IntraACL>
+	/**
+	 * This function checks, if this title is accessible for the action of the
+	 * current request. If the action is unknown it is assumed to be "read".
+	 * If the title is not accessible, the new title "Permission denied" is
+	 * returned. This is a fallback to protect titles if all other security
+	 * patches fail.
+	 *
+	 * While a page is rendered, the same title is often checked several times.
+	 * To speed things up, the results of an accessibility check are internally
+	 * cached.
+	 *
+	 * This function can be disabled in HACL_Initialize.php or LocalSettings.php
+	 * by setting the variable $haclgEnableTitleCheck = false.
+	 *
+	 * @return
+	 * 		$this, if access is granted on this title or
+	 * 		the title for "Permission denied" if not.
+	 */
+	private function checkAccessControl() {
+		if ( !defined( 'HACL_HALOACL_VERSION' ) ) {
+			// IntraACL is disabled or not fully initialized
+			return $this;
+		}
+		global $haclgEnableTitleCheck;
+		if ( isset( $haclgEnableTitleCheck ) && $haclgEnableTitleCheck === false ) {
+			return $this;
+		}
+		static $permissionCache = array();
+
+		$action = 'read';
+		$index = $this->getFullText().'-'.$action;
+		$allowed = @$permissionCache[$index];
+		if ( !isset( $allowed ) ) {
+			switch ( $action ) {
+				case 'create':
+				case 'move':
+				case 'delete':
+					$allowed = $this->userCan( $action );
+					break;
+				case 'edit':
+					// If the article does not exist and edit right was requested,
+					// check for create right.
+					$allowed = $this->userCan( $this->exists() ? 'edit' : 'create' );
+					break;
+				default:
+					// If the user has no read access to a non-existing page,
+					// but has the right to create it - allow him to "read" it
+					$allowed = $this->userCan( 'read' ) || !$this->exists() && $this->userCan( 'create' );
+			}
+			$permissionCache[$index] = $allowed;
+		}
+		if ( $allowed === false ) {
+			global $haclgContLang;
+			$etc = $haclgEnableTitleCheck;
+			$haclgEnableTitleCheck = false;
+			$t = Title::newFromURL( $haclgContLang->getPermissionDeniedPage() );
+			$haclgEnableTitleCheck = $etc;
+			return $t;
+		}
+		return $this;
+	}
+// </IntraACL>
 }
diff --git a/includes/User.php b/includes/User.php
index 0a3db4c..d8f0c9c 100644
--- a/includes/User.php
+++ b/includes/User.php
@@ -274,7 +274,13 @@ class User {
 				$this->loadDefaults();
 				break;
 			case 'name':
+				if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+					$hacl = haclfDisableTitlePatch();
+				}
 				$this->mId = self::idFromName( $this->mName );
+				if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+					haclfRestoreTitlePatch( $hacl );
+				}
 				if ( !$this->mId ) {
 					# Nonexistent user placeholder object
 					$this->loadDefaults( $this->mName );
@@ -556,6 +562,12 @@ class User {
 	public static function isValidUserName( $name ) {
 		global $wgContLang, $wgMaxNameChars;
 
+		# Disable IntraACL title check as the main and/or
+		# user namespaces may be protected
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$hacl = haclfDisableTitlePatch();
+		}
+
 		if ( $name == ''
 		|| User::isIP( $name )
 		|| strpos( $name, '/' ) !== false
@@ -563,6 +575,9 @@ class User {
 		|| $name != $wgContLang->ucfirst( $name ) ) {
 			wfDebugLog( 'username', __METHOD__ .
 				": '$name' invalid due to empty, IP, slash, length, or lowercase" );
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			return false;
 		}
 
@@ -575,6 +590,9 @@ class User {
 			|| strcmp( $name, $parsed->getPrefixedText() ) ) {
 			wfDebugLog( 'username', __METHOD__ .
 				": '$name' invalid due to ambiguous prefixes" );
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			return false;
 		}
 
@@ -591,9 +609,14 @@ class User {
 		if( preg_match( $unicodeBlacklist, $name ) ) {
 			wfDebugLog( 'username', __METHOD__ .
 				": '$name' invalid due to blacklisted characters" );
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			return false;
 		}
-
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $hacl );
+		}
 		return true;
 	}
 
@@ -765,6 +788,14 @@ class User {
 	 * @return bool|string
 	 */
 	public static function getCanonicalName( $name, $validate = 'valid' ) {
+		// <IntraACL>
+		# Disable IntraACL title check as the main and/or
+		# user namespaces may be protected
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$hacl = haclfDisableTitlePatch();
+		}
+		// </IntraACL>
+
 		# Force usernames to capital
 		global $wgContLang;
 		$name = $wgContLang->ucfirst( $name );
@@ -780,6 +811,9 @@ class User {
 			Title::newFromText( $name ) : Title::makeTitle( NS_USER, $name );
 		# Check for invalid titles
 		if( is_null( $t ) ) {
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			return false;
 		}
 
@@ -808,6 +842,9 @@ class User {
 			default:
 				throw new MWException( 'Invalid parameter value for $validate in ' . __METHOD__ );
 		}
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $hacl );
+		}
 		return $name;
 	}
 
@@ -3448,7 +3485,13 @@ class User {
 	 */
 	protected function getTokenUrl( $page, $token ) {
 		// Hack to bypass localization of 'Special:'
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$hacl = haclfDisableTitlePatch();
+		}
 		$title = Title::makeTitle( NS_MAIN, "Special:$page/$token" );
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch($hacl);
+		}
 		return $title->getCanonicalUrl();
 	}
 
diff --git a/includes/UserMailer.php b/includes/UserMailer.php
index 01e7132..1522078 100644
--- a/includes/UserMailer.php
+++ b/includes/UserMailer.php
@@ -549,7 +549,10 @@ class EmailNotification {
 					if ( $watchingUser->getOption( 'enotifwatchlistpages' ) &&
 						( !$minorEdit || $watchingUser->getOption( 'enotifminoredits' ) ) &&
 						$watchingUser->isEmailConfirmed() &&
-						$watchingUser->getID() != $userTalkId )
+						$watchingUser->getID() != $userTalkId &&
+// <IntraACL>
+						!$title->getUserPermissionsErrors( 'read', $watchingUser ) ) // Check page read access
+// </IntraACL>
 					{
 						$this->compose( $watchingUser );
 					}
@@ -564,7 +567,12 @@ class EmailNotification {
 				continue;
 			}
 			$user = User::newFromName( $name );
-			$this->compose( $user );
+// <IntraACL>
+			if ( !$title->getUserPermissionsErrors( 'read', $user ) ) {
+				// Check page read access
+				$this->compose( $user );
+			}
+// </IntraACL>
 		}
 
 		$this->sendMails();
diff --git a/includes/api/ApiExpandTemplates.php b/includes/api/ApiExpandTemplates.php
index 160f5b9..2cabee6 100644
--- a/includes/api/ApiExpandTemplates.php
+++ b/includes/api/ApiExpandTemplates.php
@@ -46,7 +46,9 @@ class ApiExpandTemplates extends ApiBase {
 
 		// Create title for parser
 		$title_obj = Title::newFromText( $params['title'] );
-		if ( !$title_obj ) {
+		// <IntraACL>
+		if ( !$title_obj || $title_obj->isExternal() || !$title_obj->userCan('read') ) {
+		// </IntraACL>
 			$this->dieUsageMsg( array( 'invalidtitle', $params['title'] ) );
 		}
 
diff --git a/includes/api/ApiMove.php b/includes/api/ApiMove.php
index 9d73562..d86cee9 100644
--- a/includes/api/ApiMove.php
+++ b/includes/api/ApiMove.php
@@ -52,13 +52,17 @@ class ApiMove extends ApiBase {
 			}
 		}
 
-		if ( !$fromTitle->exists() ) {
+		// <IntraACL>
+		if ( !$fromTitle->exists() || !$fromTitle->userCan('read') ) {
+		// </IntraACL>
 			$this->dieUsageMsg( 'notanarticle' );
 		}
 		$fromTalk = $fromTitle->getTalkPage();
 
 		$toTitle = Title::newFromText( $params['to'] );
-		if ( !$toTitle ) {
+		// <IntraACL>
+		if ( !$toTitle || $toTitle->isExternal() || !$toTitle->userCan('read') ) {
+		// </IntraACL>
 			$this->dieUsageMsg( array( 'invalidtitle', $params['to'] ) );
 		}
 		$toTalk = $toTitle->getTalkPage();
diff --git a/includes/api/ApiPageSet.php b/includes/api/ApiPageSet.php
index 0f5be6b..923316a 100644
--- a/includes/api/ApiPageSet.php
+++ b/includes/api/ApiPageSet.php
@@ -368,6 +368,11 @@ class ApiPageSet extends ApiQueryBase {
 	public function processDbRow( $row ) {
 		// Store Title object in various data structures
 		$title = Title::newFromRow( $row );
+		// <IntraACL>
+		if ( !$title->userCan('read') ) {
+			return false;
+		}
+		// </IntraACL>
 
 		$pageId = intval( $row->page_id );
 		$this->mAllPages[$row->page_namespace][$row->page_title] = $pageId;
@@ -382,6 +387,7 @@ class ApiPageSet extends ApiQueryBase {
 		foreach ( $this->mRequestedPageFields as $fieldName => &$fieldValues ) {
 			$fieldValues[$pageId] = $row-> $fieldName;
 		}
+		return true;
 	}
 
 	/**
@@ -486,8 +492,11 @@ class ApiPageSet extends ApiQueryBase {
 			foreach ( $res as $row ) {
 				$pageId = intval( $row->page_id );
 
+				// Store any extra fields requested by modules
+				$readable = $this->processDbRow( $row );
+
 				// Remove found page from the list of remaining items
-				if ( isset( $remaining ) ) {
+				if ( $readable && isset( $remaining ) ) {
 					if ( $processTitles ) {
 						unset( $remaining[$row->page_namespace][$row->page_title] );
 					} else {
@@ -495,9 +504,6 @@ class ApiPageSet extends ApiQueryBase {
 					}
 				}
 
-				// Store any extra fields requested by modules
-				$this->processDbRow( $row );
-
 				// Need gender information
 				if( MWNamespace::hasGenderDistinction( $row->page_namespace ) ) {
 					$usernames[] = $row->page_title;
@@ -567,16 +573,28 @@ class ApiPageSet extends ApiQueryBase {
 				$revid = intval( $row->rev_id );
 				$pageid = intval( $row->rev_page );
 				$this->mGoodRevIDs[$revid] = $pageid;
-				$pageids[$pageid] = '';
+				$pageids[$pageid][] = $revid;
 				unset( $remaining[$revid] );
 			}
 			$this->profileDBOut();
 		}
 
-		$this->mMissingRevIDs = array_keys( $remaining );
-
 		// Populate all the page information
 		$this->initFromPageIds( array_keys( $pageids ) );
+
+		// <IntraACL>
+		foreach ( $pageids as $pageid => $revids ) {
+			if ( !isset( $this->mGoodTitles[$pageid] ) ) {
+				// Page is unreadable, remove revisions from good list
+				foreach ( $revids as $revid ) {
+					unset( $this->mGoodRevIDs[$revid] );
+					$remaining[$revid] = true;
+				}
+			}
+		}
+		// </IntraACL>
+
+		$this->mMissingRevIDs = array_keys( $remaining );
 	}
 
 	/**
@@ -645,6 +663,11 @@ class ApiPageSet extends ApiQueryBase {
 			$from = $this->mPendingRedirectIDs[$rdfrom]->getPrefixedText();
 			$to = Title::makeTitle( $row->rd_namespace, $row->rd_title, $row->rd_fragment, $row->rd_interwiki );
 			unset( $this->mPendingRedirectIDs[$rdfrom] );
+			// <IntraACL>
+			if ( !$to->userCan('read') ) {
+				continue;
+			}
+			// </IntraACL>
 			if ( !isset( $this->mAllPages[$row->rd_namespace][$row->rd_title] ) ) {
 				$lb->add( $row->rd_namespace, $row->rd_title );
 			}
@@ -686,7 +709,9 @@ class ApiPageSet extends ApiQueryBase {
 
 		foreach ( $titles as $title ) {
 			$titleObj = is_string( $title ) ? Title::newFromText( $title ) : $title;
-			if ( !$titleObj ) {
+			// <IntraACL>
+			if ( !$titleObj || !$titleObj->userCan('read') ) {
+			// </IntraACL>
 				// Handle invalid titles gracefully
 				$this->mAllpages[0][$title] = $this->mFakePageId;
 				$this->mInvalidTitles[$this->mFakePageId] = $title;
diff --git a/includes/api/ApiParse.php b/includes/api/ApiParse.php
index db6e2bb..a0303b4 100644
--- a/includes/api/ApiParse.php
+++ b/includes/api/ApiParse.php
@@ -85,6 +85,12 @@ class ApiParse extends ApiBase {
 				}
 
 				$titleObj = $rev->getTitle();
+				// <IntraACL>
+				if ( !$titleObj->userCan('read') ) {
+					$this->dieUsage( "You are not allowed to read this article", 'permissiondenied' );
+				}
+				// </IntraACL>
+
 				$wgTitle = $titleObj;
 				$pageObj = WikiPage::factory( $titleObj );
 				$popts = $pageObj->makeParserOptions( $this->getContext() );
@@ -136,6 +142,11 @@ class ApiParse extends ApiBase {
 
 				$pageObj = $this->getTitleOrPageId( $pageParams, 'fromdb' );
 				$titleObj = $pageObj->getTitle();
+				// <IntraACL>
+				if ( !$titleObj->userCan('read') ) {
+					$this->dieUsage( "You are not allowed to read this article", 'permissiondenied' );
+				}
+				// </IntraACL>
 				$wgTitle = $titleObj;
 
 				if ( isset( $prop['revid'] ) ) {
@@ -159,6 +170,11 @@ class ApiParse extends ApiBase {
 			if ( !$titleObj ) {
 				$this->dieUsageMsg( array( 'invalidtitle', $title ) );
 			}
+			// <IntraACL>
+			if ( !$titleObj->userCan('read') ) {
+				$this->dieUsage( "You are not allowed to read this article", 'permissiondenied' );
+			}
+			// </IntraACL>
 			$wgTitle = $titleObj;
 			$pageObj = WikiPage::factory( $titleObj );
 
diff --git a/includes/api/ApiQueryAllCategories.php b/includes/api/ApiQueryAllCategories.php
index 4f4c77f..7cb8e59 100644
--- a/includes/api/ApiQueryAllCategories.php
+++ b/includes/api/ApiQueryAllCategories.php
@@ -121,6 +121,11 @@ class ApiQueryAllCategories extends ApiQueryGeneratorBase {
 
 			// Normalize titles
 			$titleObj = Title::makeTitle( NS_CATEGORY, $row->cat_title );
+			// <IntraACL>
+			if ( !$titleObj->userCan('read') ) {
+				continue;
+			}
+			// </IntraACL>
 			if ( !is_null( $resultPageSet ) ) {
 				$pages[] = $titleObj;
 			} else {
diff --git a/includes/api/ApiQueryAllImages.php b/includes/api/ApiQueryAllImages.php
index b562da8..678803f 100644
--- a/includes/api/ApiQueryAllImages.php
+++ b/includes/api/ApiQueryAllImages.php
@@ -230,6 +230,11 @@ class ApiQueryAllImages extends ApiQueryGeneratorBase {
 
 			if ( is_null( $resultPageSet ) ) {
 				$file = $repo->newFileFromRow( $row );
+				// <IntraACL>
+				if ( !$file->getTitle()->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
 				$info = array_merge( array( 'name' => $row->img_name ),
 					ApiQueryImageInfo::getInfo( $file, $prop, $result ) );
 				self::addTitleInfo( $info, $file->getTitle() );
diff --git a/includes/api/ApiQueryAllLinks.php b/includes/api/ApiQueryAllLinks.php
index da4840f..08f9527 100644
--- a/includes/api/ApiQueryAllLinks.php
+++ b/includes/api/ApiQueryAllLinks.php
@@ -142,8 +142,13 @@ class ApiQueryAllLinks extends ApiQueryGeneratorBase {
 				if ( $fld_ids ) {
 					$vals['fromid'] = intval( $row->pl_from );
 				}
+				$title = Title::makeTitle( $params['namespace'], $row->pl_title );
+				// <IntraACL>
+				if ( !$title->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
 				if ( $fld_title ) {
-					$title = Title::makeTitle( $params['namespace'], $row->pl_title );
 					ApiQueryBase::addTitleInfo( $vals, $title );
 				}
 				$fit = $result->addValue( array( 'query', $this->getModuleName() ), null, $vals );
diff --git a/includes/api/ApiQueryAllMessages.php b/includes/api/ApiQueryAllMessages.php
index f5e1146..15dd744 100644
--- a/includes/api/ApiQueryAllMessages.php
+++ b/includes/api/ApiQueryAllMessages.php
@@ -48,7 +48,9 @@ class ApiQueryAllMessages extends ApiQueryBase {
 		if ( $params['enableparser'] ) {
 			if ( !is_null( $params['title'] ) ) {
 				$title = Title::newFromText( $params['title'] );
-				if ( !$title ) {
+				// <IntraACL>
+				if ( !$title || $title->isExternal() || !$title->userCan('read') ) {
+				// </IntraACL>
 					$this->dieUsageMsg( array( 'invalidtitle', $params['title'] ) );
 				}
 			} else {
diff --git a/includes/api/ApiQueryAllPages.php b/includes/api/ApiQueryAllPages.php
index 16cc31d..0bf5131 100644
--- a/includes/api/ApiQueryAllPages.php
+++ b/includes/api/ApiQueryAllPages.php
@@ -197,6 +197,11 @@ class ApiQueryAllPages extends ApiQueryGeneratorBase {
 
 			if ( is_null( $resultPageSet ) ) {
 				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
 				$vals = array(
 					'pageid' => intval( $row->page_id ),
 					'ns' => intval( $title->getNamespace() ),
diff --git a/includes/api/ApiQueryBacklinks.php b/includes/api/ApiQueryBacklinks.php
index 06db87b..8e163a7 100644
--- a/includes/api/ApiQueryBacklinks.php
+++ b/includes/api/ApiQueryBacklinks.php
@@ -275,7 +275,12 @@ class ApiQueryBacklinks extends ApiQueryGeneratorBase {
 			} else {
 				$this->pageMap[$row->page_namespace][$row->page_title] = $row->page_id;
 				if ( $row->page_is_redirect ) {
-					$this->redirTitles[] = Title::makeTitle( $row->page_namespace, $row->page_title );
+					$redir = Title::makeTitle( $row->page_namespace, $row->page_title );
+					// <IntraACL>
+					if ( $redir->userCan('read') ) {
+						$this->redirTitles[] = $redir;
+					}
+					// </IntraACL>
 				}
 
 				$resultPageSet->processDbRow( $row );
@@ -359,6 +364,11 @@ class ApiQueryBacklinks extends ApiQueryGeneratorBase {
 	private function extractRowInfo( $row ) {
 		$this->pageMap[$row->page_namespace][$row->page_title] = $row->page_id;
 		$t = Title::makeTitle( $row->page_namespace, $row->page_title );
+		// <IntraACL>
+		if ( !$t->userCan('read') ) {
+			continue;
+		}
+		// </IntraACL>
 		$a = array( 'pageid' => intval( $row->page_id ) );
 		ApiQueryBase::addTitleInfo( $a, $t );
 		if ( $row->page_is_redirect ) {
@@ -371,7 +381,13 @@ class ApiQueryBacklinks extends ApiQueryGeneratorBase {
 
 	private function extractRedirRowInfo( $row ) {
 		$a['pageid'] = intval( $row->page_id );
-		ApiQueryBase::addTitleInfo( $a, Title::makeTitle( $row->page_namespace, $row->page_title ) );
+		$t = Title::makeTitle( $row->page_namespace, $row->page_title );
+		// <IntraACL>
+		if ( !$t->userCan('read') ) {
+			continue;
+		}
+		// </IntraACL>
+		ApiQueryBase::addTitleInfo( $a, $t );
 		if ( $row->page_is_redirect ) {
 			$a['redirect'] = '';
 		}
diff --git a/includes/api/ApiQueryCategories.php b/includes/api/ApiQueryCategories.php
index 309c2ce..99ec2e7 100644
--- a/includes/api/ApiQueryCategories.php
+++ b/includes/api/ApiQueryCategories.php
@@ -74,7 +74,7 @@ class ApiQueryCategories extends ApiQueryGeneratorBase {
 			$cats = array();
 			foreach ( $params['categories'] as $cat ) {
 				$title = Title::newFromText( $cat );
-				if ( !$title || $title->getNamespace() != NS_CATEGORY ) {
+				if ( !$title || $title->getNamespace() != NS_CATEGORY || !$title->userCan('read') ) {
 					$this->setWarning( "\"$cat\" is not a category" );
 				} else {
 					$cats[] = $title->getDBkey();
@@ -148,6 +148,11 @@ class ApiQueryCategories extends ApiQueryGeneratorBase {
 				}
 
 				$title = Title::makeTitle( NS_CATEGORY, $row->cl_to );
+				// <IntraACL>
+				if ( !$title->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
 				$vals = array();
 				ApiQueryBase::addTitleInfo( $vals, $title );
 				if ( isset( $prop['sortkey'] ) ) {
diff --git a/includes/api/ApiQueryCategoryMembers.php b/includes/api/ApiQueryCategoryMembers.php
index 55ce023..bce8aa3 100644
--- a/includes/api/ApiQueryCategoryMembers.php
+++ b/includes/api/ApiQueryCategoryMembers.php
@@ -211,8 +211,13 @@ class ApiQueryCategoryMembers extends ApiQueryGeneratorBase {
 				if ( $fld_ids ) {
 					$vals['pageid'] = intval( $row->page_id );
 				}
+				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
 				if ( $fld_title ) {
-					$title = Title::makeTitle( $row->page_namespace, $row->page_title );
 					ApiQueryBase::addTitleInfo( $vals, $title );
 				}
 				if ( $fld_sortkey ) {
diff --git a/includes/api/ApiQueryDeletedrevs.php b/includes/api/ApiQueryDeletedrevs.php
index 7f21420..ce3b653 100644
--- a/includes/api/ApiQueryDeletedrevs.php
+++ b/includes/api/ApiQueryDeletedrevs.php
@@ -234,6 +234,11 @@ class ApiQueryDeletedrevs extends ApiQueryBase {
 			}
 
 			$title = Title::makeTitle( $row->ar_namespace, $row->ar_title );
+			// <IntraACL>
+			if ( !$title->userCan('read') ) {
+				continue;
+			}
+			// </IntraACL>
 
 			if ( $fld_parsedcomment ) {
 				$rev['parsedcomment'] = Linker::formatComment( $row->ar_comment, $title );
diff --git a/includes/api/ApiQueryExtLinksUsage.php b/includes/api/ApiQueryExtLinksUsage.php
index 42b398b..3231dd1 100644
--- a/includes/api/ApiQueryExtLinksUsage.php
+++ b/includes/api/ApiQueryExtLinksUsage.php
@@ -116,8 +116,13 @@ class ApiQueryExtLinksUsage extends ApiQueryGeneratorBase {
 				if ( $fld_ids ) {
 					$vals['pageid'] = intval( $row->page_id );
 				}
+				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
 				if ( $fld_title ) {
-					$title = Title::makeTitle( $row->page_namespace, $row->page_title );
 					ApiQueryBase::addTitleInfo( $vals, $title );
 				}
 				if ( $fld_url ) {
diff --git a/includes/api/ApiQueryFilearchive.php b/includes/api/ApiQueryFilearchive.php
index a5486ef..c18f1b3 100644
--- a/includes/api/ApiQueryFilearchive.php
+++ b/includes/api/ApiQueryFilearchive.php
@@ -152,6 +152,11 @@ class ApiQueryFilearchive extends ApiQueryBase {
 			$file = array();
 			$file['name'] = $row->fa_name;
 			$title = Title::makeTitle( NS_FILE, $row->fa_name );
+			// <IntraACL>
+			if ( !$title->userCan('read') ) {
+				continue;
+			}
+			// </IntraACL>
 			self::addTitleInfo( $file, $title );
 
 			if ( $fld_sha1 ) {
diff --git a/includes/api/ApiQueryIWBacklinks.php b/includes/api/ApiQueryIWBacklinks.php
index c5012f0..b270e04 100644
--- a/includes/api/ApiQueryIWBacklinks.php
+++ b/includes/api/ApiQueryIWBacklinks.php
@@ -127,6 +127,11 @@ class ApiQueryIWBacklinks extends ApiQueryGeneratorBase {
 				$entry = array( 'pageid' => $row->page_id );
 
 				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
 				ApiQueryBase::addTitleInfo( $entry, $title );
 
 				if ( $row->page_is_redirect ) {
diff --git a/includes/api/ApiQueryImages.php b/includes/api/ApiQueryImages.php
index 6052a75..f690a91 100644
--- a/includes/api/ApiQueryImages.php
+++ b/includes/api/ApiQueryImages.php
@@ -92,7 +92,7 @@ class ApiQueryImages extends ApiQueryGeneratorBase {
 			$images = array();
 			foreach ( $params['images'] as $img ) {
 				$title = Title::newFromText( $img );
-				if ( !$title || $title->getNamespace() != NS_FILE ) {
+				if ( !$title || $title->getNamespace() != NS_FILE || !$title->userCan('read') ) {
 					$this->setWarning( "\"$img\" is not a file" );
 				} else {
 					$images[] = $title->getDBkey();
@@ -113,7 +113,13 @@ class ApiQueryImages extends ApiQueryGeneratorBase {
 					break;
 				}
 				$vals = array();
-				ApiQueryBase::addTitleInfo( $vals, Title::makeTitle( NS_FILE, $row->il_to ) );
+				$title = Title::makeTitle( NS_FILE, $row->il_to );
+				// <IntraACL>
+				if ( !$title->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
+				ApiQueryBase::addTitleInfo( $vals, $title );
 				$fit = $this->addPageSubItem( $row->il_from, $vals );
 				if ( !$fit ) {
 					$this->setContinueEnumParameter( 'continue', $row->il_from . '|' . $row->il_to );
diff --git a/includes/api/ApiQueryInfo.php b/includes/api/ApiQueryInfo.php
index 5d4f034..094c893 100644
--- a/includes/api/ApiQueryInfo.php
+++ b/includes/api/ApiQueryInfo.php
@@ -273,14 +273,20 @@ class ApiQueryInfo extends ApiQueryBase {
 						'value returned by the previous query', '_badcontinue' );
 			}
 			$conttitle = Title::makeTitleSafe( $cont[0], $cont[1] );
-			foreach ( $this->everything as $pageid => $title ) {
-				if ( Title::compare( $title, $conttitle ) >= 0 ) {
-					break;
+			// <IntraACL>
+			if ( $conttitle && $conttitle->userCan('read') ) {
+			// </IntraACL>
+				foreach ( $this->everything as $pageid => $title ) {
+					if ( Title::compare( $title, $conttitle ) >= 0 ) {
+						break;
+					}
+					unset( $this->titles[$pageid] );
+					unset( $this->missing[$pageid] );
+					unset( $this->everything[$pageid] );
 				}
-				unset( $this->titles[$pageid] );
-				unset( $this->missing[$pageid] );
-				unset( $this->everything[$pageid] );
+			// <IntraACL>
 			}
+			// </IntraACL>
 		}
 
 		$this->pageRestrictions = $pageSet->getCustomField( 'page_restrictions' );
diff --git a/includes/api/ApiQueryLangBacklinks.php b/includes/api/ApiQueryLangBacklinks.php
index 3920407..09ed5a0 100644
--- a/includes/api/ApiQueryLangBacklinks.php
+++ b/includes/api/ApiQueryLangBacklinks.php
@@ -127,6 +127,11 @@ class ApiQueryLangBacklinks extends ApiQueryGeneratorBase {
 				$entry = array( 'pageid' => $row->page_id );
 
 				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
 				ApiQueryBase::addTitleInfo( $entry, $title );
 
 				if ( $row->page_is_redirect ) {
diff --git a/includes/api/ApiQueryLinks.php b/includes/api/ApiQueryLinks.php
index 9e4b7eb..018a28e 100644
--- a/includes/api/ApiQueryLinks.php
+++ b/includes/api/ApiQueryLinks.php
@@ -98,7 +98,7 @@ class ApiQueryLinks extends ApiQueryGeneratorBase {
 			$lb = new LinkBatch;
 			foreach ( $params[$this->titlesParam] as $t ) {
 				$title = Title::newFromText( $t );
-				if ( !$title ) {
+				if ( !$title || !$title->userCan('read') ) {
 					$this->setWarning( "\"$t\" is not a valid title" );
 				} else {
 					$lb->addObj( $title );
@@ -161,7 +161,13 @@ class ApiQueryLinks extends ApiQueryGeneratorBase {
 					break;
 				}
 				$vals = array();
-				ApiQueryBase::addTitleInfo( $vals, Title::makeTitle( $row->pl_namespace, $row->pl_title ) );
+				$title = Title::makeTitle( $row->pl_namespace, $row->pl_title );
+				// <IntraACL>
+				if ( !$title->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
+				ApiQueryBase::addTitleInfo( $vals, $title );
 				$fit = $this->addPageSubItem( $row->pl_from, $vals );
 				if ( !$fit ) {
 					$this->setContinueEnumParameter( 'continue',
diff --git a/includes/api/ApiQueryLogEvents.php b/includes/api/ApiQueryLogEvents.php
index 5d85c22..bf78824 100644
--- a/includes/api/ApiQueryLogEvents.php
+++ b/includes/api/ApiQueryLogEvents.php
@@ -129,7 +129,9 @@ class ApiQueryLogEvents extends ApiQueryBase {
 		$title = $params['title'];
 		if ( !is_null( $title ) ) {
 			$titleObj = Title::newFromText( $title );
-			if ( is_null( $titleObj ) ) {
+			// <IntraACL>
+			if ( is_null( $titleObj ) || !$titleObj->userCan('read') ) {
+			// </IntraACL>
 				$this->dieUsage( "Bad title value '$title'", 'param_title' );
 			}
 			$this->addWhereFld( 'log_namespace', $titleObj->getNamespace() );
@@ -278,9 +280,12 @@ class ApiQueryLogEvents extends ApiQueryBase {
 			$vals['pageid'] = intval( $row->page_id );
 		}
 
-		if ( $this->fld_title || $this->fld_parsedcomment ) {
-			$title = Title::makeTitle( $row->log_namespace, $row->log_title );
+		$title = Title::makeTitle( $row->log_namespace, $row->log_title );
+		// <IntraACL>
+		if ( !$title->userCan('read') ) {
+			return false;
 		}
+		// </IntraACL>
 
 		if ( $this->fld_title ) {
 			if ( LogEventsList::isDeleted( $row, LogPage::DELETED_ACTION ) ) {
diff --git a/includes/api/ApiQueryProtectedTitles.php b/includes/api/ApiQueryProtectedTitles.php
index 14aed28..dbc127c 100644
--- a/includes/api/ApiQueryProtectedTitles.php
+++ b/includes/api/ApiQueryProtectedTitles.php
@@ -88,6 +88,11 @@ class ApiQueryProtectedTitles extends ApiQueryGeneratorBase {
 
 			$title = Title::makeTitle( $row->pt_namespace, $row->pt_title );
 			if ( is_null( $resultPageSet ) ) {
+				// <IntraACL>
+				if ( !$title->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
 				$vals = array();
 				ApiQueryBase::addTitleInfo( $vals, $title );
 				if ( isset( $prop['timestamp'] ) ) {
diff --git a/includes/api/ApiQueryQueryPage.php b/includes/api/ApiQueryQueryPage.php
index a8be26d..99c6412 100644
--- a/includes/api/ApiQueryQueryPage.php
+++ b/includes/api/ApiQueryQueryPage.php
@@ -112,6 +112,11 @@ class ApiQueryQueryPage extends ApiQueryGeneratorBase {
 
 			$title = Title::makeTitle( $row->namespace, $row->title );
 			if ( is_null( $resultPageSet ) ) {
+				// <IntraACL>
+				if ( !$title->userCan('read') ) {
+					continue;
+				}
+				// </IntraACL>
 				$data = array( 'value' => $row->value );
 				if ( $qp->usesTimestamps() ) {
 					$data['timestamp'] = wfTimestamp( TS_ISO_8601, $row->value );
diff --git a/includes/api/ApiQueryRandom.php b/includes/api/ApiQueryRandom.php
index ddf5841..9e2a9b3 100644
--- a/includes/api/ApiQueryRandom.php
+++ b/includes/api/ApiQueryRandom.php
@@ -80,9 +80,13 @@ class ApiQueryRandom extends ApiQueryGeneratorBase {
 			if ( is_null( $resultPageSet ) ) {
 				// Prevent duplicates
 				if ( !in_array( $row->page_id, $this->pageIDs ) ) {
+					$info = $this->extractRowInfo( $row );
+					if ( !$info ) {
+						continue;
+					}
 					$fit = $this->getResult()->addValue(
 							array( 'query', $this->getModuleName() ),
-							null, $this->extractRowInfo( $row ) );
+							null, $info );
 					if ( !$fit ) {
 						// We can't really query-continue a random list.
 						// Return an insanely high value so
@@ -126,6 +130,11 @@ class ApiQueryRandom extends ApiQueryGeneratorBase {
 
 	private function extractRowInfo( $row ) {
 		$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+		// <IntraACL>
+		if ( !$title->userCan('read') ) {
+			return false;
+		}
+		// </IntraACL>
 		$vals = array();
 		$vals['id'] = intval( $row->page_id );
 		ApiQueryBase::addTitleInfo( $vals, $title );
diff --git a/includes/api/ApiQueryRecentChanges.php b/includes/api/ApiQueryRecentChanges.php
index 7ae4f37..bf61d1c 100644
--- a/includes/api/ApiQueryRecentChanges.php
+++ b/includes/api/ApiQueryRecentChanges.php
@@ -329,6 +329,11 @@ class ApiQueryRecentChanges extends ApiQueryGeneratorBase {
 
 		/* Determine the title of the page that has been changed. */
 		$title = Title::makeTitle( $row->rc_namespace, $row->rc_title );
+		// <IntraACL>
+		if ( !$title->userCan('read') ) {
+			continue;
+		}
+		// </IntraACL>
 
 		/* Our output data. */
 		$vals = array();
diff --git a/includes/api/ApiQuerySearch.php b/includes/api/ApiQuerySearch.php
index 364433d..9e944c7 100644
--- a/includes/api/ApiQuerySearch.php
+++ b/includes/api/ApiQuerySearch.php
@@ -130,6 +130,12 @@ class ApiQuerySearch extends ApiQueryGeneratorBase {
 
 			$title = $result->getTitle();
 			if ( is_null( $resultPageSet ) ) {
+				// <IntraACL>
+				if ( !$title->userCan('read') ) {
+					$result = $matches->next();
+					continue;
+				}
+				// </IntraACL>
 				$vals = array();
 				ApiQueryBase::addTitleInfo( $vals, $title );
 
diff --git a/includes/api/ApiQueryUserContributions.php b/includes/api/ApiQueryUserContributions.php
index f30b132..3ffa739 100644
--- a/includes/api/ApiQueryUserContributions.php
+++ b/includes/api/ApiQueryUserContributions.php
@@ -111,6 +111,9 @@ class ApiQueryContributions extends ApiQueryBase {
 			}
 
 			$vals = $this->extractRowInfo( $row );
+			if ( !$vals ) {
+				continue;
+			}
 			$fit = $this->getResult()->addValue( array( 'query', $this->getModuleName() ), null, $vals );
 			if ( !$fit ) {
 				if ( $this->multiUserMode ) {
@@ -303,6 +306,11 @@ class ApiQueryContributions extends ApiQueryBase {
 		}
 
 		$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+		// <IntraACL>
+		if ( !$title || !$title->userCan('read') ) {
+			return false;
+		}
+		// </IntraACL>
 
 		if ( $this->fld_title ) {
 			ApiQueryBase::addTitleInfo( $vals, $title );
diff --git a/includes/api/ApiQueryWatchlist.php b/includes/api/ApiQueryWatchlist.php
index a1a3372..4f60a3f 100644
--- a/includes/api/ApiQueryWatchlist.php
+++ b/includes/api/ApiQueryWatchlist.php
@@ -199,6 +199,11 @@ class ApiQueryWatchlist extends ApiQueryGeneratorBase {
 
 			if ( is_null( $resultPageSet ) ) {
 				$vals = $this->extractRowInfo( $row );
+				// <IntraACL>
+				if ( !$vals ) {
+					continue;
+				}
+				// </IntraACL>
 				$fit = $this->getResult()->addValue( array( 'query', $this->getModuleName() ), null, $vals );
 				if ( !$fit ) {
 					$this->setContinueEnumParameter( 'start',
@@ -233,6 +238,11 @@ class ApiQueryWatchlist extends ApiQueryGeneratorBase {
 		}
 
 		$title = Title::makeTitle( $row->rc_namespace, $row->rc_title );
+		// <IntraACL>
+		if ( !$title || !$title->userCan('read') ) {
+			return false;
+		}
+		// </IntraACL>
 
 		if ( $this->fld_title ) {
 			ApiQueryBase::addTitleInfo( $vals, $title );
diff --git a/includes/api/ApiQueryWatchlistRaw.php b/includes/api/ApiQueryWatchlistRaw.php
index 6b24aef..1242d93 100644
--- a/includes/api/ApiQueryWatchlistRaw.php
+++ b/includes/api/ApiQueryWatchlistRaw.php
@@ -109,6 +109,11 @@ class ApiQueryWatchlistRaw extends ApiQueryGeneratorBase {
 			$t = Title::makeTitle( $row->wl_namespace, $row->wl_title );
 
 			if ( is_null( $resultPageSet ) ) {
+				// <IntraACL>
+				if ( !$t || !$t->userCan('read') ) {
+					return false;
+				}
+				// </IntraACL>
 				$vals = array();
 				ApiQueryBase::addTitleInfo( $vals, $t );
 				if ( isset( $prop['changed'] ) && !is_null( $row->wl_notificationtimestamp ) )
diff --git a/includes/cache/LinkBatch.php b/includes/cache/LinkBatch.php
index 372f983..3542967 100644
--- a/includes/cache/LinkBatch.php
+++ b/includes/cache/LinkBatch.php
@@ -150,6 +150,11 @@ class LinkBatch {
 		if ( !$res ) {
 			return array();
 		}
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$etc = haclfDisableTitlePatch();
+		}
+		// </IntraACL>
 
 		// For each returned entry, add it to the list of good links, and remove it from $remaining
 
@@ -170,6 +175,11 @@ class LinkBatch {
 				$ids[$title->getPrefixedDBkey()] = 0;
 			}
 		}
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $etc );
+		}
+		// </IntraACL>
 		return $ids;
 	}
 
diff --git a/includes/diff/DifferenceEngine.php b/includes/diff/DifferenceEngine.php
index c7156fb..3cba322 100644
--- a/includes/diff/DifferenceEngine.php
+++ b/includes/diff/DifferenceEngine.php
@@ -1034,6 +1034,13 @@ class DifferenceEngine extends ContextSource {
 			return false;
 		}
 
+		// <IntraACL>
+		if ( !$this->mNewRev->getTitle()->userCan('read') ) {
+			$this->mNewRev = false;
+			return false;
+		}
+		// </IntraACL>
+
 		// Update the new revision ID in case it was 0 (makes life easier doing UI stuff)
 		$this->mNewid = $this->mNewRev->getId();
 		$this->mNewPage = $this->mNewRev->getTitle();
@@ -1060,6 +1067,13 @@ class DifferenceEngine extends ContextSource {
 
 		if ( $this->mOldRev ) {
 			$this->mOldPage = $this->mOldRev->getTitle();
+			// <IntraACL>
+			if ( !$this->mOldRev->getTitle()->userCan('read') ) {
+				$this->mOldid = false;
+				$this->mOldRev = false;
+				return false;
+			}
+			// </IntraACL>
 		}
 
 		return true;
diff --git a/includes/logging/LogEventsList.php b/includes/logging/LogEventsList.php
index 4de1a97..62ee9f5 100644
--- a/includes/logging/LogEventsList.php
+++ b/includes/logging/LogEventsList.php
@@ -303,6 +303,11 @@ class LogEventsList extends ContextSource {
 	 */
 	public function logLine( $row ) {
 		$entry = DatabaseLogEntry::newFromRow( $row );
+		// <IntraACL>
+		if ( !$entry->getTarget()->userCan('read') ) {
+			return '';
+		}
+		// </IntraACL>
 		$formatter = LogFormatter::newFromEntry( $entry );
 		$formatter->setContext( $this->getContext() );
 		$formatter->setShowUserToolLinks( !( $this->flags & self::NO_EXTRA_USER_LINKS ) );
diff --git a/includes/parser/LinkHolderArray.php b/includes/parser/LinkHolderArray.php
index d9356b4..2354f50 100644
--- a/includes/parser/LinkHolderArray.php
+++ b/includes/parser/LinkHolderArray.php
@@ -72,6 +72,12 @@ class LinkHolderArray {
 	 * Recreate the Title objects
 	 */
 	function __wakeup() {
+		// <IntraACL>
+		// LinkHolderArray skips permission checks so page links in parsed content are never cloaked
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$etc = haclfDisableTitlePatch();
+		}
+		// </IntraACL>
 		foreach ( $this->internals as &$nsLinks ) {
 			foreach ( $nsLinks as &$entry ) {
 				$entry['title'] = Title::newFromText( $entry['pdbk'] );
@@ -84,6 +90,11 @@ class LinkHolderArray {
 			$entry['title'] = Title::newFromText( $entry['pdbk'] );
 		}
 		unset( $entry );
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $etc );
+		}
+		// </IntraACL>
 	}
 
 	/**
@@ -290,6 +301,13 @@ class LinkHolderArray {
 
 		$linkcolour_ids = array();
 
+		// <IntraACL>
+		// LinkHolderArray skips permission checks so page links in parsed content are never cloaked
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$etc = haclfDisableTitlePatch();
+		}
+		// </IntraACL>
+
 		# Generate query
 		$queries = array();
 		foreach ( $this->internals as $ns => $entries ) {
@@ -410,6 +428,11 @@ class LinkHolderArray {
 
 		wfProfileOut( __METHOD__.'-replace' );
 		wfProfileOut( __METHOD__ );
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $etc );
+		}
+		// </IntraACL>
 	}
 
 	/**
diff --git a/includes/parser/Parser.php b/includes/parser/Parser.php
index 10765de..dd67ad5 100644
--- a/includes/parser/Parser.php
+++ b/includes/parser/Parser.php
@@ -1881,7 +1881,18 @@ class Parser {
 
 			wfProfileOut( __METHOD__."-misc" );
 			wfProfileIn( __METHOD__."-title" );
+			// <IntraACL>
+			// Do not check permissions for links, except image links
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			$nt = Title::newFromText( $this->mStripState->unstripNoWiki( $link ) );
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 			if ( $nt === null ) {
 				$s .= $prefix . '[[' . $line;
 				wfProfileOut( __METHOD__."-title" );
@@ -1963,7 +1974,10 @@ class Parser {
 
 				if ( $ns == NS_FILE ) {
 					wfProfileIn( __METHOD__."-image" );
-					if ( !wfIsBadImage( $nt->getDBkey(), $this->mTitle ) ) {
+					// <IntraACL>
+					if ( !wfIsBadImage( $nt->getDBkey(), $this->mTitle ) &&
+						( $canRead = $nt->userCanRead() ) ) {
+					// </IntraACL>
 						if ( $wasblank ) {
 							# if no parameters were passed, $text
 							# becomes something like "File:Foo.png",
@@ -1980,6 +1994,13 @@ class Parser {
 						# cloak any absolute URLs inside the image markup, so replaceExternalLinks() won't touch them
 						$s .= $prefix . $this->armorLinks(
 							$this->makeImage( $nt, $text, $holders ) ) . $trail;
+					// <IntraACL>
+					} elseif ( !$canRead ) {
+						# Still register dependency on a nonreadable image
+						$time = $sha1 = $descQuery = false;
+						list( $file, $nt ) = $this->fetchFileAndTitle( $nt, $time, $sha1 );
+						$s .= $prefix . $trail;
+					// </IntraACL>
 					} else {
 						$s .= $prefix . $trail;
 					}
@@ -3289,7 +3310,18 @@ class Parser {
 			if ( $subpage !== '' ) {
 				$ns = $this->mTitle->getNamespace();
 			}
+			// <IntraACL>
+			// Template access check is done below, after loading
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			$title = Title::newFromText( $part1, $ns );
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 			if ( $title ) {
 				$titleText = $title->getPrefixedText();
 				# Check for language variants if the template is not found
@@ -3352,11 +3384,25 @@ class Parser {
 					$found = false; # access denied
 					wfDebug( __METHOD__.": template inclusion denied for " . $title->getPrefixedDBkey() );
 				} else {
-					list( $text, $title ) = $this->getTemplateDom( $title );
+					list( $text, $title, $canRead ) = $this->getTemplateDom( $title );
 					if ( $text !== false ) {
 						$found = true;
 						$isChildObj = true;
 					}
+					// <IntraACL>
+					if ( $text !== false && !$canRead ) {
+						// Expand templates to always get correct templatelinks,
+						// even if current user has no access to some templates
+						global $haclgInclusionDeniedMessage;
+						$this->getPreprocessor()->newFrame()->expand( $text, 0 );
+						if ( $haclgInclusionDeniedMessage ) {
+							$text = wfMsg( $haclgInclusionDeniedMessage );
+						} elseif ( $haclgInclusionDeniedMessage === '' ) {
+							$text = '';
+						}
+						$isChildObj = false;
+					}
+					// </IntraACL>
 				}
 
 				# If the title is valid but undisplayable, make a link to it
@@ -3489,32 +3535,36 @@ class Parser {
 			$titleText = $title->getPrefixedDBkey();
 		}
 		if ( isset( $this->mTplDomCache[$titleText] ) ) {
-			return array( $this->mTplDomCache[$titleText], $title );
+			$dom = $this->mTplDomCache[$titleText];
+			if ( !$dom ) {
+				return array( false, $title, true );
+			}
+			return array( $dom[0], $title, $dom[1] );
 		}
 
 		# Cache miss, go to the database
-		list( $text, $title ) = $this->fetchTemplateAndTitle( $title );
+		list( $text, $title, $canRead ) = $this->fetchTemplateAndTitle( $title );
 
 		if ( $text === false ) {
 			$this->mTplDomCache[$titleText] = false;
-			return array( false, $title );
+			return array( false, $title, $canRead );
 		}
 
 		$dom = $this->preprocessToDom( $text, self::PTD_FOR_INCLUSION );
-		$this->mTplDomCache[ $titleText ] = $dom;
+		$this->mTplDomCache[ $titleText ] = array( $dom, $canRead );
 
 		if ( !$title->equals( $cacheTitle ) ) {
 			$this->mTplRedirCache[$cacheTitle->getPrefixedDBkey()] =
 				array( $title->getNamespace(), $cdb = $title->getDBkey() );
 		}
 
-		return array( $dom, $title );
+		return array( $dom, $title, $canRead );
 	}
 
 	/**
 	 * Fetch the unparsed text of a template and register a reference to it.
 	 * @param Title $title
-	 * @return Array ( string or false, Title )
+	 * @return Array ( string or false, Title, boolean )
 	 */
 	function fetchTemplateAndTitle( $title ) {
 		$templateCb = $this->mOptions->getTemplateCallback(); # Defaults to Parser::statelessFetchTemplate()
@@ -3526,7 +3576,7 @@ class Parser {
 				$this->mOutput->addTemplate( $dep['title'], $dep['page_id'], $dep['rev_id'] );
 			}
 		}
-		return array( $text, $finalTitle );
+		return array( $text, $finalTitle, $stuff['canRead'] );
 	}
 
 	/**
@@ -3536,7 +3586,7 @@ class Parser {
 	 */
 	function fetchTemplate( $title ) {
 		$rv = $this->fetchTemplateAndTitle( $title );
-		return $rv[0];
+		return $rv[2] ? $rv[0] : '';
 	}
 
 	/**
@@ -3552,6 +3602,7 @@ class Parser {
 		$text = $skip = false;
 		$finalTitle = $title;
 		$deps = array();
+		$canRead = true;
 
 		# Loop to fetch the article, with up to 1 redirect
 		for ( $i = 0; $i < 2 && is_object( $title ); $i++ ) {
@@ -3560,6 +3611,7 @@ class Parser {
 			wfRunHooks( 'BeforeParserFetchTemplateAndtitle',
 				array( $parser, $title, &$skip, &$id ) );
 
+			$canRead = $canRead && $title->userCanRead();
 			if ( $skip ) {
 				$text = false;
 				$deps[] = array(
@@ -3569,11 +3621,21 @@ class Parser {
 				);
 				break;
 			}
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			# Get the revision
 			$rev = $id
 				? Revision::newFromId( $id )
 				: Revision::newFromTitle( $title, false, Revision::READ_NORMAL );
 			$rev_id = $rev ? $rev->getId() : 0;
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 			# If there is no current revision, there is no page
 			if ( $id === false && !$rev ) {
 				$linkCache = LinkCache::singleton();
@@ -3610,9 +3672,20 @@ class Parser {
 			}
 			# Redirect?
 			$finalTitle = $title;
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			$title = Title::newFromRedirect( $text );
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 		}
 		return array(
+			'canRead' => $canRead,
 			'text' => $text,
 			'finalTitle' => $finalTitle,
 			'deps' => $deps );
diff --git a/includes/parser/ParserCache.php b/includes/parser/ParserCache.php
index 6a4ef0c..b4841c9 100644
--- a/includes/parser/ParserCache.php
+++ b/includes/parser/ParserCache.php
@@ -68,6 +68,9 @@ class ParserCache {
 		$pageid = $article->getID();
 		$renderkey = (int)($wgRequest->getVal('action') == 'render');
 
+		// Needed for IntraACL >= 2.03 to modify parser cache key for correct permissions
+		wfRunHooks( 'ParserOutputRenderKey', array( $article, &$renderkey ) );
+
 		$key = wfMemcKey( 'pcache', 'idhash', "{$pageid}-{$renderkey}!{$hash}" );
 		return $key;
 	}
diff --git a/includes/specials/SpecialAllpages.php b/includes/specials/SpecialAllpages.php
index 0f8b255..04a306b 100644
--- a/includes/specials/SpecialAllpages.php
+++ b/includes/specials/SpecialAllpages.php
@@ -379,6 +379,11 @@ class SpecialAllpages extends IncludableSpecialPage {
 				$out = Xml::openElement( 'table', array( 'class' => 'mw-allpages-table-chunk' ) );
 				while( ( $n < $this->maxPerPage ) && ( $s = $res->fetchObject() ) ) {
 					$t = Title::newFromRow( $s );
+					// <IntraACL>
+					if ( $t && !$t->userCan('read') ) {
+						continue;
+					}
+					// </IntraACL>
 					if( $t ) {
 						$link = ( $s->page_is_redirect ? '<div class="allpagesredirect">' : '' ) .
 							Linker::link( $t ) .
diff --git a/includes/specials/SpecialListredirects.php b/includes/specials/SpecialListredirects.php
index fe338a0..96d3831 100644
--- a/includes/specials/SpecialListredirects.php
+++ b/includes/specials/SpecialListredirects.php
@@ -109,6 +109,11 @@ class ListredirectsPage extends QueryPage {
 		# Find out where the redirect leads
 		$target = $this->getRedirectTarget( $result );
 		if( $target ) {
+			// <IntraACL>
+			if ( !$target->userCan('read') ) {
+				return '';
+			}
+			// </IntraACL>
 			# Make a link to the destination page
 			$lang = $this->getLanguage();
 			$arr = $lang->getArrow() . $lang->getDirMark();
diff --git a/includes/specials/SpecialMostinterwikis.php b/includes/specials/SpecialMostinterwikis.php
index 894d697..05f5f0c 100644
--- a/includes/specials/SpecialMostinterwikis.php
+++ b/includes/specials/SpecialMostinterwikis.php
@@ -94,7 +94,9 @@ class MostinterwikisPage extends QueryPage {
 	 */
 	function formatResult( $skin, $result ) {
 		$title = Title::makeTitleSafe( $result->namespace, $result->title );
-		if ( !$title ) {
+		// <IntraACL>
+		if ( !$title || !$title->userCan('read') ) {
+		// </IntraACL>
 			return Html::element( 'span', array( 'class' => 'mw-invalidtitle' ),
 				Linker::getInvalidTitleDescription( $this->getContext(), $result->namespace, $result->title ) );
 		}
diff --git a/includes/specials/SpecialNewpages.php b/includes/specials/SpecialNewpages.php
index 8e15d55..8a5a5b7 100644
--- a/includes/specials/SpecialNewpages.php
+++ b/includes/specials/SpecialNewpages.php
@@ -311,6 +311,12 @@ class SpecialNewpages extends IncludableSpecialPage {
 		$lang = $this->getLanguage();
 		$dm = $lang->getDirMark();
 
+		// <IntraACL>
+		if ( !$title->userCan('read') ) {
+			return '';
+		}
+		// </IntraACL>
+
 		$spanTime = Html::element( 'span', array( 'class' => 'mw-newpages-time' ),
 			$lang->userTimeAndDate( $result->rc_timestamp, $this->getUser() )
 		);
diff --git a/includes/specials/SpecialPrefixindex.php b/includes/specials/SpecialPrefixindex.php
index 7740b32..99e32f7 100644
--- a/includes/specials/SpecialPrefixindex.php
+++ b/includes/specials/SpecialPrefixindex.php
@@ -192,6 +192,11 @@ class SpecialPrefixindex extends SpecialAllpages {
 
 				while( ( $n < $this->maxPerPage ) && ( $s = $res->fetchObject() ) ) {
 					$t = Title::makeTitle( $s->page_namespace, $s->page_title );
+					// <IntraACL>
+					if ( !$t->userCan('read') ) {
+						continue;
+					}
+					// </IntraACL>
 					if( $t ) {
 						$link = ($s->page_is_redirect ? '<div class="allpagesredirect">' : '' ) .
 							Linker::linkKnown(
diff --git a/includes/specials/SpecialRandompage.php b/includes/specials/SpecialRandompage.php
index 307088e..7885a38 100644
--- a/includes/specials/SpecialRandompage.php
+++ b/includes/specials/SpecialRandompage.php
@@ -69,6 +69,15 @@ class RandomPage extends SpecialPage {
 			return;
 		}
 
+		// <IntraACL>
+		// Do not redirect to non-readable pages, just print permission errors in that case
+		global $wgUser;
+		$permErrors = $title->getUserPermissionsErrors( 'read', $wgUser );
+		if ( count( $permErrors ) ) {
+			throw new PermissionsError( 'read', $permErrors );
+		}
+		// </IntraACL>
+
 		$redirectParam = $this->isRedirect() ? array( 'redirect' => 'no' ) : array();
 		$query = array_merge( $this->getRequest()->getValues(), $redirectParam );
 		unset( $query['title'] );
diff --git a/includes/specials/SpecialRecentchanges.php b/includes/specials/SpecialRecentchanges.php
index 2bd8b0a..bed8a9c 100644
--- a/includes/specials/SpecialRecentchanges.php
+++ b/includes/specials/SpecialRecentchanges.php
@@ -497,10 +497,15 @@ class SpecialRecentChanges extends IncludableSpecialPage {
 
 		$s = $list->beginRecentChangesList();
 		foreach( $rows as $obj ) {
+			// <IntraACL>
+			$rc = RecentChange::newFromRow( $obj );
+			if ( !$rc->getTitle()->userCan('read') ) {
+				continue;
+			}
+			// </IntraACL>
 			if( $limit == 0 ) {
 				break;
 			}
-			$rc = RecentChange::newFromRow( $obj );
 			$rc->counter = $counter++;
 			# Check if the page has been updated since the last visit
 			if( $wgShowUpdatedMarker && !empty( $obj->wl_notificationtimestamp ) ) {
diff --git a/includes/specials/SpecialSearch.php b/includes/specials/SpecialSearch.php
index 5f5b6b4..59911fe 100644
--- a/includes/specials/SpecialSearch.php
+++ b/includes/specials/SpecialSearch.php
@@ -512,7 +512,11 @@ class SpecialSearch extends SpecialPage {
 		$out .= "<ul class='mw-search-results'>\n";
 		$result = $matches->next();
 		while( $result ) {
-			$out .= $this->showHit( $result, $terms );
+			// <IntraACL>
+			if ( $result->getTitle() && $result->getTitle()->userCan('read') ) {
+				$out .= $this->showHit( $result, $terms );
+			}
+			// </IntraACL>
 			$result = $matches->next();
 		}
 		$out .= "</ul>\n";
diff --git a/includes/specials/SpecialUserlogin.php b/includes/specials/SpecialUserlogin.php
index 58da77d..6500788 100644
--- a/includes/specials/SpecialUserlogin.php
+++ b/includes/specials/SpecialUserlogin.php
@@ -961,7 +961,9 @@ class LoginForm extends SpecialPage {
 		}
 
 		$returnToTitle = Title::newFromText( $returnTo );
-		if ( !$returnToTitle ) {
+		// <IntraACL>
+		if ( !$returnToTitle || !$returnToTitle->userCan('read') ) {
+		// </IntraACL>
 			$returnToTitle = Title::newMainPage();
 		}
 
diff --git a/includes/specials/SpecialWatchlist.php b/includes/specials/SpecialWatchlist.php
index 5dfc113..581bc45 100644
--- a/includes/specials/SpecialWatchlist.php
+++ b/includes/specials/SpecialWatchlist.php
@@ -412,6 +412,11 @@ class SpecialWatchlist extends SpecialPage {
 		foreach ( $res as $obj ) {
 			# Make RC entry
 			$rc = RecentChange::newFromRow( $obj );
+			// <IntraACL>
+			if ( !$rc->getTitle()->userCan('read') ) {
+				continue;
+			}
+			// </IntraACL>
 			$rc->counter = $counter++;
 
 			if ( $wgShowUpdatedMarker ) {
diff --git a/includes/specials/SpecialWhatlinkshere.php b/includes/specials/SpecialWhatlinkshere.php
index f135649..af14c90 100644
--- a/includes/specials/SpecialWhatlinkshere.php
+++ b/includes/specials/SpecialWhatlinkshere.php
@@ -257,7 +257,11 @@ class SpecialWhatLinksHere extends SpecialPage {
 		$out->addHTML( $this->listStart( $level ) );
 		foreach ( $rows as $row ) {
 			$nt = Title::makeTitle( $row->page_namespace, $row->page_title );
-
+			// <IntraACL>
+			if ( !$nt->userCan('read') ) {
+				continue;
+			}
+			// </IntraACL>
 			if ( $row->rd_from && $level < 2 ) {
 				$out->addHTML( $this->listItem( $row, $nt, true ) );
 				$this->showIndirectLinks( $level + 1, $nt, $wgMaxRedirectLinksRetrieved );
